

================================================================
== Vivado HLS Report for 'ANN'
================================================================
* Date:           Wed Aug 24 05:25:55 2016

* Version:        2015.4 (Build 1412921 on Wed Nov 18 09:58:55 AM 2015)
* Project:        ANN_complete
* Solution:       sol_default
* Product family: zynq
* Target device:  xc7z010clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.69|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+-----+-----+----------+-----------+-----------+----------------+----------+
        |                 |  Latency  | Iteration|  Initiation Interval  |      Trip      |          |
        |    Loop Name    | min | max |  Latency |  achieved |   target  |      Count     | Pipelined|
        +-----------------+-----+-----+----------+-----------+-----------+----------------+----------+
        |- Loop 1         |    ?|    ?|         2|          -|          -|               ?|    no    |
        |- Loop 2         |    ?|    ?|         ?|          -|          -| 0 ~ 2147483646 |    no    |
        | + Loop 2.1      |    ?|    ?|         ?|          -|          -|               ?|    no    |
        |  ++ Loop 2.1.1  |    ?|    ?|        13|          -|          -|               ?|    no    |
        |- Loop 3         |    ?|    ?|         ?|          -|          -|               ?|    no    |
        | + Loop 3.1      |    ?|    ?|        13|          -|          -|               ?|    no    |
        |- Loop 4         |    ?|    ?|        34|          -|          -|               ?|    no    |
        |- Loop 5         |    ?|    ?|         3|          -|          -|               ?|    no    |
        |- Loop 6         |    ?|    ?|         ?|          -|          -|               ?|    no    |
        | + Loop 6.1      |    ?|    ?|         2|          -|          -|               ?|    no    |
        +-----------------+-----+-----+----------+-----------+-----------+----------------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 160
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	156  / (!tmp_9)
	3  / (tmp_9)
3 --> 
	4  / (tmp_3)
	5  / (!tmp_3)
4 --> 
	3  / true
5 --> 
	6  / (tmp_8)
	80  / (!tmp_8)
6 --> 
	7  / true
7 --> 
	8  / (tmp_15)
	5  / (!tmp_15)
8 --> 
	9  / (tmp_29)
	21  / (!tmp_29)
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	8  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	7  / true
80 --> 
	81  / true
81 --> 
	122  / (!tmp_17)
	82  / (tmp_17)
82 --> 
	83  / (tmp_32)
	95  / (!tmp_32)
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	82  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
	113  / true
113 --> 
	114  / true
114 --> 
	115  / true
115 --> 
	116  / true
116 --> 
	117  / true
117 --> 
	118  / true
118 --> 
	119  / true
119 --> 
	120  / true
120 --> 
	121  / true
121 --> 
	81  / true
122 --> 
	123  / (tmp_28)
	156  / (!tmp_28)
123 --> 
	124  / true
124 --> 
	125  / true
125 --> 
	126  / true
126 --> 
	127  / true
127 --> 
	128  / true
128 --> 
	129  / true
129 --> 
	130  / true
130 --> 
	131  / true
131 --> 
	132  / true
132 --> 
	133  / true
133 --> 
	134  / true
134 --> 
	135  / true
135 --> 
	136  / true
136 --> 
	137  / true
137 --> 
	138  / true
138 --> 
	139  / true
139 --> 
	140  / true
140 --> 
	141  / true
141 --> 
	142  / true
142 --> 
	143  / true
143 --> 
	144  / true
144 --> 
	145  / true
145 --> 
	146  / true
146 --> 
	147  / true
147 --> 
	148  / true
148 --> 
	149  / true
149 --> 
	150  / true
150 --> 
	151  / true
151 --> 
	152  / true
152 --> 
	153  / true
153 --> 
	154  / true
154 --> 
	155  / true
155 --> 
	122  / true
156 --> 
	157  / (tmp_9 & !tmp & tmp_49)
	159  / (tmp_9 & tmp & tmp_51)
157 --> 
	156  / (!tmp_63)
	158  / (tmp_63)
158 --> 
	157  / true
159 --> 
	160  / true
160 --> 
	156  / true
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: config_addr [1/1] 0.00ns
:5  %config_addr = getelementptr [6 x i32]* %config_r, i64 0, i64 0

ST_1: config_load [2/2] 2.39ns
:7  %config_load = load i32* %config_addr, align 4


 <State 2>: 6.28ns
ST_2: stg_163 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap([6 x i32]* %config_r) nounwind, !map !0

ST_2: stg_164 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap([5040 x double]* %WandB) nounwind, !map !6

ST_2: stg_165 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap([140 x double]* %uOut) nounwind, !map !14

ST_2: stg_166 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap([35 x double]* %netIn) nounwind, !map !19

ST_2: stg_167 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap([35 x i32]* %netOut) nounwind, !map !24

ST_2: stg_168 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecTopModule([4 x i8]* @ANN_str) nounwind

ST_2: config_load [1/2] 2.39ns
:7  %config_load = load i32* %config_addr, align 4

ST_2: tmp [1/1] 2.52ns
:8  %tmp = icmp eq i32 %config_load, 0

ST_2: p_numLayer_load [1/1] 0.00ns
:9  %p_numLayer_load = load i32* @p_numLayer, align 4

ST_2: tmp_2 [1/1] 2.52ns
:10  %tmp_2 = icmp eq i32 %config_load, 2

ST_2: tmp_6 [1/1] 2.52ns
:11  %tmp_6 = icmp eq i32 %config_load, 0

ST_2: tmp_9 [1/1] 1.37ns
:12  %tmp_9 = or i1 %tmp_6, %tmp_2

ST_2: stg_175 [1/1] 0.00ns
:13  br i1 %tmp_9, label %._crit_edge.preheader, label %.loopexit6

ST_2: p_layerSize_0_load [1/1] 0.00ns
._crit_edge.preheader:0  %p_layerSize_0_load = load i32* @p_layerSize_0, align 16

ST_2: stg_177 [1/1] 1.57ns
._crit_edge.preheader:1  br label %._crit_edge


 <State 3>: 4.09ns
ST_3: i [1/1] 0.00ns
._crit_edge:0  %i = phi i31 [ %i_4, %1 ], [ 0, %._crit_edge.preheader ]

ST_3: i_cast [1/1] 0.00ns
._crit_edge:1  %i_cast = zext i31 %i to i32

ST_3: tmp_3 [1/1] 2.52ns
._crit_edge:2  %tmp_3 = icmp slt i32 %i_cast, %p_layerSize_0_load

ST_3: i_4 [1/1] 2.44ns
._crit_edge:3  %i_4 = add i31 %i, 1

ST_3: stg_182 [1/1] 1.57ns
._crit_edge:4  br i1 %tmp_3, label %1, label %.preheader16

ST_3: tmp_5 [1/1] 0.00ns
:0  %tmp_5 = zext i31 %i to i64

ST_3: netIn_addr [1/1] 0.00ns
:2  %netIn_addr = getelementptr [35 x double]* %netIn, i64 0, i64 %tmp_5

ST_3: netIn_load [2/2] 2.71ns
:3  %netIn_load = load double* %netIn_addr, align 8


 <State 4>: 5.42ns
ST_4: p_uOut_addr [1/1] 0.00ns
:1  %p_uOut_addr = getelementptr [140 x double]* @p_uOut, i64 0, i64 %tmp_5

ST_4: netIn_load [1/2] 2.71ns
:3  %netIn_load = load double* %netIn_addr, align 8

ST_4: stg_188 [1/1] 2.71ns
:4  store double %netIn_load, double* %p_uOut_addr, align 8

ST_4: stg_189 [1/1] 0.00ns
:5  br label %._crit_edge


 <State 5>: 2.52ns
ST_5: i_1 [1/1] 0.00ns
.preheader16:0  %i_1 = phi i31 [ %i_6, %4 ], [ 1, %._crit_edge ]

ST_5: i_1_cast [1/1] 0.00ns
.preheader16:1  %i_1_cast = zext i31 %i_1 to i32

ST_5: tmp_8 [1/1] 2.52ns
.preheader16:2  %tmp_8 = icmp slt i32 %i_1_cast, %p_numLayer_load

ST_5: empty [1/1] 0.00ns
.preheader16:3  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 2147483646, i64 0) nounwind

ST_5: stg_194 [1/1] 0.00ns
.preheader16:4  br i1 %tmp_8, label %.preheader15.preheader, label %.preheader13.preheader

ST_5: tmp_s [1/1] 2.44ns
.preheader15.preheader:3  %tmp_s = add i31 -1, %i_1

ST_5: tmp_21 [1/1] 0.00ns
.preheader15.preheader:4  %tmp_21 = trunc i31 %tmp_s to i9

ST_5: tmp_22 [1/1] 0.00ns
.preheader15.preheader:6  %tmp_22 = trunc i31 %tmp_s to i2

ST_5: tmp_7 [1/1] 2.44ns
.preheader13.preheader:0  %tmp_7 = add nsw i32 -1, %p_numLayer_load

ST_5: tmp_23 [1/1] 0.00ns
.preheader13.preheader:1  %tmp_23 = trunc i32 %tmp_7 to i9

ST_5: tmp_25 [1/1] 0.00ns
.preheader13.preheader:3  %tmp_25 = trunc i32 %tmp_7 to i2

ST_5: tmp_11 [1/1] 2.44ns
.preheader13.preheader:4  %tmp_11 = add nsw i32 -2, %p_numLayer_load

ST_5: tmp_27 [1/1] 0.00ns
.preheader13.preheader:5  %tmp_27 = trunc i32 %tmp_11 to i9

ST_5: tmp_30 [1/1] 0.00ns
.preheader13.preheader:7  %tmp_30 = trunc i32 %tmp_11 to i2


 <State 6>: 6.38ns
ST_6: tmp_12 [1/1] 0.00ns
.preheader15.preheader:0  %tmp_12 = trunc i31 %i_1 to i9

ST_6: tmp_1 [1/1] 6.38ns
.preheader15.preheader:1  %tmp_1 = mul i9 35, %tmp_12

ST_6: tmp_19 [1/1] 0.00ns
.preheader15.preheader:2  %tmp_19 = trunc i31 %i_1 to i2

ST_6: tmp_4 [1/1] 6.38ns
.preheader15.preheader:5  %tmp_4 = mul i9 35, %tmp_21

ST_6: stg_208 [1/1] 1.57ns
.preheader15.preheader:7  br label %.preheader15


 <State 7>: 4.09ns
ST_7: j [1/1] 0.00ns
.preheader15:0  %j = phi i32 [ %j_3, %3 ], [ 0, %.preheader15.preheader ]

ST_7: p_layerSize_0_load_1 [1/1] 0.00ns
.preheader15:1  %p_layerSize_0_load_1 = load i32* @p_layerSize_0, align 4

ST_7: p_layerSize_1_load [1/1] 0.00ns
.preheader15:2  %p_layerSize_1_load = load i32* @p_layerSize_1, align 4

ST_7: p_layerSize_2_load [1/1] 0.00ns
.preheader15:3  %p_layerSize_2_load = load i32* @p_layerSize_2, align 4

ST_7: p_layerSize_3_load [1/1] 0.00ns
.preheader15:4  %p_layerSize_3_load = load i32* @p_layerSize_3, align 4

ST_7: tmp_14 [1/1] 1.57ns
.preheader15:5  %tmp_14 = call i32 @_ssdm_op_Mux.ap_auto.4i32.i2(i32 %p_layerSize_0_load_1, i32 %p_layerSize_1_load, i32 %p_layerSize_2_load, i32 %p_layerSize_3_load, i2 %tmp_19) nounwind

ST_7: tmp_15 [1/1] 2.52ns
.preheader15:6  %tmp_15 = icmp slt i32 %j, %tmp_14

ST_7: j_3 [1/1] 2.44ns
.preheader15:7  %j_3 = add nsw i32 %j, 1

ST_7: stg_217 [1/1] 0.00ns
.preheader15:8  br i1 %tmp_15, label %.preheader14.preheader, label %4

ST_7: tmp_18 [1/1] 1.57ns
.preheader14.preheader:0  %tmp_18 = call i32 @_ssdm_op_Mux.ap_auto.4i32.i2(i32 %p_layerSize_0_load_1, i32 %p_layerSize_1_load, i32 %p_layerSize_2_load, i32 %p_layerSize_3_load, i2 %tmp_22) nounwind

ST_7: tmp_31 [1/1] 0.00ns
.preheader14.preheader:1  %tmp_31 = trunc i32 %j to i9

ST_7: tmp_20 [1/1] 1.84ns
.preheader14.preheader:2  %tmp_20 = add i9 %tmp_1, %tmp_31

ST_7: tmp_20_cast [1/1] 0.00ns
.preheader14.preheader:3  %tmp_20_cast = sext i9 %tmp_20 to i64

ST_7: p_uOut_addr_2 [1/1] 0.00ns
.preheader14.preheader:4  %p_uOut_addr_2 = getelementptr [140 x double]* @p_uOut, i64 0, i64 %tmp_20_cast

ST_7: stg_223 [1/1] 1.57ns
.preheader14.preheader:5  br label %.preheader14

ST_7: i_6 [1/1] 2.44ns
:0  %i_6 = add i31 %i_1, 1

ST_7: stg_225 [1/1] 0.00ns
:1  br label %.preheader16


 <State 8>: 8.23ns
ST_8: k [1/1] 0.00ns
.preheader14:0  %k = phi i31 [ %k_1, %2 ], [ 0, %.preheader14.preheader ]

ST_8: sum [1/1] 0.00ns
.preheader14:1  %sum = phi double [ %sum_2, %2 ], [ 0.000000e+00, %.preheader14.preheader ]

ST_8: k_cast [1/1] 0.00ns
.preheader14:2  %k_cast = zext i31 %k to i32

ST_8: tmp_29 [1/1] 2.52ns
.preheader14:3  %tmp_29 = icmp slt i32 %k_cast, %tmp_18

ST_8: k_1 [1/1] 2.44ns
.preheader14:4  %k_1 = add i31 %k, 1

ST_8: stg_231 [1/1] 0.00ns
.preheader14:5  br i1 %tmp_29, label %2, label %3

ST_8: tmp_39 [1/1] 0.00ns
:0  %tmp_39 = trunc i31 %k to i9

ST_8: tmp_35 [1/1] 1.84ns
:1  %tmp_35 = add i9 %tmp_4, %tmp_39

ST_8: tmp_35_cast [1/1] 0.00ns
:2  %tmp_35_cast = sext i9 %tmp_35 to i64

ST_8: p_uOut_addr_1 [1/1] 0.00ns
:3  %p_uOut_addr_1 = getelementptr [140 x double]* @p_uOut, i64 0, i64 %tmp_35_cast

ST_8: p_uOut_load [2/2] 2.71ns
:4  %p_uOut_load = load double* %p_uOut_addr_1, align 8

ST_8: sum_3 [5/5] 8.23ns
:0  %sum_3 = fadd double %sum, 0.000000e+00


 <State 9>: 2.71ns
ST_9: p_uOut_load [1/2] 2.71ns
:4  %p_uOut_load = load double* %p_uOut_addr_1, align 8


 <State 10>: 7.79ns
ST_10: tmp_37 [6/6] 7.79ns
:5  %tmp_37 = fmul double %p_uOut_load, 0.000000e+00


 <State 11>: 7.79ns
ST_11: tmp_37 [5/6] 7.79ns
:5  %tmp_37 = fmul double %p_uOut_load, 0.000000e+00


 <State 12>: 7.79ns
ST_12: tmp_37 [4/6] 7.79ns
:5  %tmp_37 = fmul double %p_uOut_load, 0.000000e+00


 <State 13>: 7.79ns
ST_13: tmp_37 [3/6] 7.79ns
:5  %tmp_37 = fmul double %p_uOut_load, 0.000000e+00


 <State 14>: 7.79ns
ST_14: tmp_37 [2/6] 7.79ns
:5  %tmp_37 = fmul double %p_uOut_load, 0.000000e+00


 <State 15>: 7.79ns
ST_15: tmp_37 [1/6] 7.79ns
:5  %tmp_37 = fmul double %p_uOut_load, 0.000000e+00


 <State 16>: 8.23ns
ST_16: sum_2 [5/5] 8.23ns
:6  %sum_2 = fadd double %sum, %tmp_37


 <State 17>: 8.23ns
ST_17: sum_2 [4/5] 8.23ns
:6  %sum_2 = fadd double %sum, %tmp_37


 <State 18>: 8.23ns
ST_18: sum_2 [3/5] 8.23ns
:6  %sum_2 = fadd double %sum, %tmp_37


 <State 19>: 8.23ns
ST_19: sum_2 [2/5] 8.23ns
:6  %sum_2 = fadd double %sum, %tmp_37


 <State 20>: 8.23ns
ST_20: sum_2 [1/5] 8.23ns
:6  %sum_2 = fadd double %sum, %tmp_37

ST_20: stg_250 [1/1] 0.00ns
:7  br label %.preheader14


 <State 21>: 8.23ns
ST_21: sum_3 [4/5] 8.23ns
:0  %sum_3 = fadd double %sum, 0.000000e+00


 <State 22>: 8.23ns
ST_22: sum_3 [3/5] 8.23ns
:0  %sum_3 = fadd double %sum, 0.000000e+00


 <State 23>: 8.23ns
ST_23: sum_3 [2/5] 8.23ns
:0  %sum_3 = fadd double %sum, 0.000000e+00


 <State 24>: 8.23ns
ST_24: sum_3 [1/5] 8.23ns
:0  %sum_3 = fadd double %sum, 0.000000e+00


 <State 25>: 8.69ns
ST_25: tmp_41_to_int [1/1] 0.00ns
:1  %tmp_41_to_int = bitcast double %sum_3 to i64

ST_25: tmp_41_neg [1/1] 1.37ns
:2  %tmp_41_neg = xor i64 %tmp_41_to_int, -9223372036854775808

ST_25: tmp_40 [1/1] 0.00ns
:3  %tmp_40 = bitcast i64 %tmp_41_neg to double

ST_25: tmp_41 [18/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 26>: 7.32ns
ST_26: tmp_41 [17/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 27>: 7.32ns
ST_27: tmp_41 [16/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 28>: 7.32ns
ST_28: tmp_41 [15/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 29>: 7.32ns
ST_29: tmp_41 [14/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 30>: 7.32ns
ST_30: tmp_41 [13/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 31>: 7.32ns
ST_31: tmp_41 [12/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 32>: 7.32ns
ST_32: tmp_41 [11/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 33>: 7.32ns
ST_33: tmp_41 [10/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 34>: 7.32ns
ST_34: tmp_41 [9/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 35>: 7.32ns
ST_35: tmp_41 [8/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 36>: 7.32ns
ST_36: tmp_41 [7/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 37>: 7.32ns
ST_37: tmp_41 [6/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 38>: 7.32ns
ST_38: tmp_41 [5/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 39>: 7.32ns
ST_39: tmp_41 [4/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 40>: 7.32ns
ST_40: tmp_41 [3/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 41>: 7.32ns
ST_41: tmp_41 [2/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 42>: 7.32ns
ST_42: tmp_41 [1/18] 7.32ns
:4  %tmp_41 = call double @llvm.exp.f64(double %tmp_40)


 <State 43>: 8.23ns
ST_43: tmp_42 [5/5] 8.23ns
:5  %tmp_42 = fadd double %tmp_41, 1.000000e+00


 <State 44>: 8.23ns
ST_44: tmp_42 [4/5] 8.23ns
:5  %tmp_42 = fadd double %tmp_41, 1.000000e+00


 <State 45>: 8.23ns
ST_45: tmp_42 [3/5] 8.23ns
:5  %tmp_42 = fadd double %tmp_41, 1.000000e+00


 <State 46>: 8.23ns
ST_46: tmp_42 [2/5] 8.23ns
:5  %tmp_42 = fadd double %tmp_41, 1.000000e+00


 <State 47>: 8.23ns
ST_47: tmp_42 [1/5] 8.23ns
:5  %tmp_42 = fadd double %tmp_41, 1.000000e+00


 <State 48>: 8.62ns
ST_48: tmp_43 [31/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 49>: 8.62ns
ST_49: tmp_43 [30/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 50>: 8.62ns
ST_50: tmp_43 [29/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 51>: 8.62ns
ST_51: tmp_43 [28/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 52>: 8.62ns
ST_52: tmp_43 [27/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 53>: 8.62ns
ST_53: tmp_43 [26/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 54>: 8.62ns
ST_54: tmp_43 [25/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 55>: 8.62ns
ST_55: tmp_43 [24/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 56>: 8.62ns
ST_56: tmp_43 [23/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 57>: 8.62ns
ST_57: tmp_43 [22/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 58>: 8.62ns
ST_58: tmp_43 [21/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 59>: 8.62ns
ST_59: tmp_43 [20/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 60>: 8.62ns
ST_60: tmp_43 [19/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 61>: 8.62ns
ST_61: tmp_43 [18/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 62>: 8.62ns
ST_62: tmp_43 [17/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 63>: 8.62ns
ST_63: tmp_43 [16/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 64>: 8.62ns
ST_64: tmp_43 [15/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 65>: 8.62ns
ST_65: tmp_43 [14/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 66>: 8.62ns
ST_66: tmp_43 [13/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 67>: 8.62ns
ST_67: tmp_43 [12/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 68>: 8.62ns
ST_68: tmp_43 [11/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 69>: 8.62ns
ST_69: tmp_43 [10/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 70>: 8.62ns
ST_70: tmp_43 [9/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 71>: 8.62ns
ST_71: tmp_43 [8/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 72>: 8.62ns
ST_72: tmp_43 [7/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 73>: 8.62ns
ST_73: tmp_43 [6/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 74>: 8.62ns
ST_74: tmp_43 [5/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 75>: 8.62ns
ST_75: tmp_43 [4/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 76>: 8.62ns
ST_76: tmp_43 [3/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 77>: 8.62ns
ST_77: tmp_43 [2/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 78>: 8.62ns
ST_78: tmp_43 [1/31] 8.62ns
:6  %tmp_43 = fdiv double 1.000000e+00, %tmp_42


 <State 79>: 2.71ns
ST_79: stg_312 [1/1] 2.71ns
:7  store double %tmp_43, double* %p_uOut_addr_2, align 8

ST_79: stg_313 [1/1] 0.00ns
:8  br label %.preheader15


 <State 80>: 6.38ns
ST_80: tmp_10 [1/1] 6.38ns
.preheader13.preheader:2  %tmp_10 = mul i9 35, %tmp_23

ST_80: tmp_13 [1/1] 6.38ns
.preheader13.preheader:6  %tmp_13 = mul i9 35, %tmp_27

ST_80: stg_316 [1/1] 1.57ns
.preheader13.preheader:8  br label %.preheader13


 <State 81>: 5.66ns
ST_81: i_2 [1/1] 0.00ns
.preheader13:0  %i_2 = phi i32 [ %i_7, %6 ], [ 0, %.preheader13.preheader ]

ST_81: sumsoft [1/1] 0.00ns
.preheader13:1  %sumsoft = phi double [ %sumsoft_1, %6 ], [ 0.000000e+00, %.preheader13.preheader ]

ST_81: p_layerSize_0_load_2 [1/1] 0.00ns
.preheader13:2  %p_layerSize_0_load_2 = load i32* @p_layerSize_0, align 4

ST_81: p_layerSize_1_load_1 [1/1] 0.00ns
.preheader13:3  %p_layerSize_1_load_1 = load i32* @p_layerSize_1, align 4

ST_81: p_layerSize_2_load_1 [1/1] 0.00ns
.preheader13:4  %p_layerSize_2_load_1 = load i32* @p_layerSize_2, align 4

ST_81: p_layerSize_3_load_1 [1/1] 0.00ns
.preheader13:5  %p_layerSize_3_load_1 = load i32* @p_layerSize_3, align 4

ST_81: tmp_16 [1/1] 1.57ns
.preheader13:6  %tmp_16 = call i32 @_ssdm_op_Mux.ap_auto.4i32.i2(i32 %p_layerSize_0_load_2, i32 %p_layerSize_1_load_1, i32 %p_layerSize_2_load_1, i32 %p_layerSize_3_load_1, i2 %tmp_25) nounwind

ST_81: tmp_17 [1/1] 2.52ns
.preheader13:7  %tmp_17 = icmp slt i32 %i_2, %tmp_16

ST_81: i_7 [1/1] 2.44ns
.preheader13:8  %i_7 = add nsw i32 %i_2, 1

ST_81: stg_326 [1/1] 1.57ns
.preheader13:9  br i1 %tmp_17, label %.preheader12.preheader, label %.preheader11

ST_81: tmp_24 [1/1] 1.57ns
.preheader12.preheader:0  %tmp_24 = call i32 @_ssdm_op_Mux.ap_auto.4i32.i2(i32 %p_layerSize_0_load_2, i32 %p_layerSize_1_load_1, i32 %p_layerSize_2_load_1, i32 %p_layerSize_3_load_1, i2 %tmp_30) nounwind

ST_81: tmp_33 [1/1] 0.00ns
.preheader12.preheader:1  %tmp_33 = trunc i32 %i_2 to i9

ST_81: tmp_26 [1/1] 1.84ns
.preheader12.preheader:2  %tmp_26 = add i9 %tmp_10, %tmp_33

ST_81: tmp_26_cast [1/1] 0.00ns
.preheader12.preheader:3  %tmp_26_cast = sext i9 %tmp_26 to i64

ST_81: p_uOut_addr_4 [1/1] 0.00ns
.preheader12.preheader:4  %p_uOut_addr_4 = getelementptr [140 x double]* @p_uOut, i64 0, i64 %tmp_26_cast

ST_81: stg_332 [1/1] 1.57ns
.preheader12.preheader:5  br label %.preheader12


 <State 82>: 8.23ns
ST_82: j_1 [1/1] 0.00ns
.preheader12:0  %j_1 = phi i31 [ %j_4, %5 ], [ 0, %.preheader12.preheader ]

ST_82: sum_1 [1/1] 0.00ns
.preheader12:1  %sum_1 = phi double [ %sum_4, %5 ], [ 0.000000e+00, %.preheader12.preheader ]

ST_82: j_1_cast [1/1] 0.00ns
.preheader12:2  %j_1_cast = zext i31 %j_1 to i32

ST_82: tmp_32 [1/1] 2.52ns
.preheader12:3  %tmp_32 = icmp slt i32 %j_1_cast, %tmp_24

ST_82: j_4 [1/1] 2.44ns
.preheader12:4  %j_4 = add i31 %j_1, 1

ST_82: stg_338 [1/1] 0.00ns
.preheader12:5  br i1 %tmp_32, label %5, label %6

ST_82: tmp_44 [1/1] 0.00ns
:0  %tmp_44 = trunc i31 %j_1 to i9

ST_82: tmp_46 [1/1] 1.84ns
:1  %tmp_46 = add i9 %tmp_13, %tmp_44

ST_82: tmp_49_cast [1/1] 0.00ns
:2  %tmp_49_cast = sext i9 %tmp_46 to i64

ST_82: p_uOut_addr_3 [1/1] 0.00ns
:3  %p_uOut_addr_3 = getelementptr [140 x double]* @p_uOut, i64 0, i64 %tmp_49_cast

ST_82: p_uOut_load_1 [2/2] 2.71ns
:4  %p_uOut_load_1 = load double* %p_uOut_addr_3, align 8

ST_82: sum_5 [5/5] 8.23ns
:0  %sum_5 = fadd double %sum_1, 0.000000e+00


 <State 83>: 2.71ns
ST_83: p_uOut_load_1 [1/2] 2.71ns
:4  %p_uOut_load_1 = load double* %p_uOut_addr_3, align 8


 <State 84>: 7.79ns
ST_84: tmp_45 [6/6] 7.79ns
:5  %tmp_45 = fmul double %p_uOut_load_1, 0.000000e+00


 <State 85>: 7.79ns
ST_85: tmp_45 [5/6] 7.79ns
:5  %tmp_45 = fmul double %p_uOut_load_1, 0.000000e+00


 <State 86>: 7.79ns
ST_86: tmp_45 [4/6] 7.79ns
:5  %tmp_45 = fmul double %p_uOut_load_1, 0.000000e+00


 <State 87>: 7.79ns
ST_87: tmp_45 [3/6] 7.79ns
:5  %tmp_45 = fmul double %p_uOut_load_1, 0.000000e+00


 <State 88>: 7.79ns
ST_88: tmp_45 [2/6] 7.79ns
:5  %tmp_45 = fmul double %p_uOut_load_1, 0.000000e+00


 <State 89>: 7.79ns
ST_89: tmp_45 [1/6] 7.79ns
:5  %tmp_45 = fmul double %p_uOut_load_1, 0.000000e+00


 <State 90>: 8.23ns
ST_90: sum_4 [5/5] 8.23ns
:6  %sum_4 = fadd double %sum_1, %tmp_45


 <State 91>: 8.23ns
ST_91: sum_4 [4/5] 8.23ns
:6  %sum_4 = fadd double %sum_1, %tmp_45


 <State 92>: 8.23ns
ST_92: sum_4 [3/5] 8.23ns
:6  %sum_4 = fadd double %sum_1, %tmp_45


 <State 93>: 8.23ns
ST_93: sum_4 [2/5] 8.23ns
:6  %sum_4 = fadd double %sum_1, %tmp_45


 <State 94>: 8.23ns
ST_94: sum_4 [1/5] 8.23ns
:6  %sum_4 = fadd double %sum_1, %tmp_45

ST_94: stg_357 [1/1] 0.00ns
:7  br label %.preheader12


 <State 95>: 8.23ns
ST_95: sum_5 [4/5] 8.23ns
:0  %sum_5 = fadd double %sum_1, 0.000000e+00


 <State 96>: 8.23ns
ST_96: sum_5 [3/5] 8.23ns
:0  %sum_5 = fadd double %sum_1, 0.000000e+00


 <State 97>: 8.23ns
ST_97: sum_5 [2/5] 8.23ns
:0  %sum_5 = fadd double %sum_1, 0.000000e+00


 <State 98>: 8.23ns
ST_98: sum_5 [1/5] 8.23ns
:0  %sum_5 = fadd double %sum_1, 0.000000e+00


 <State 99>: 7.32ns
ST_99: tmp_47 [18/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 100>: 7.32ns
ST_100: tmp_47 [17/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 101>: 7.32ns
ST_101: tmp_47 [16/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 102>: 7.32ns
ST_102: tmp_47 [15/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 103>: 7.32ns
ST_103: tmp_47 [14/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 104>: 7.32ns
ST_104: tmp_47 [13/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 105>: 7.32ns
ST_105: tmp_47 [12/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 106>: 7.32ns
ST_106: tmp_47 [11/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 107>: 7.32ns
ST_107: tmp_47 [10/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 108>: 7.32ns
ST_108: tmp_47 [9/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 109>: 7.32ns
ST_109: tmp_47 [8/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 110>: 7.32ns
ST_110: tmp_47 [7/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 111>: 7.32ns
ST_111: tmp_47 [6/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 112>: 7.32ns
ST_112: tmp_47 [5/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 113>: 7.32ns
ST_113: tmp_47 [4/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 114>: 7.32ns
ST_114: tmp_47 [3/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 115>: 7.32ns
ST_115: tmp_47 [2/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 116>: 7.32ns
ST_116: tmp_47 [1/18] 7.32ns
:1  %tmp_47 = call double @llvm.exp.f64(double %sum_5)


 <State 117>: 8.23ns
ST_117: stg_380 [1/1] 2.71ns
:2  store double %tmp_47, double* %p_uOut_addr_4, align 8

ST_117: sumsoft_1 [5/5] 8.23ns
:3  %sumsoft_1 = fadd double %sumsoft, %tmp_47


 <State 118>: 8.23ns
ST_118: sumsoft_1 [4/5] 8.23ns
:3  %sumsoft_1 = fadd double %sumsoft, %tmp_47


 <State 119>: 8.23ns
ST_119: sumsoft_1 [3/5] 8.23ns
:3  %sumsoft_1 = fadd double %sumsoft, %tmp_47


 <State 120>: 8.23ns
ST_120: sumsoft_1 [2/5] 8.23ns
:3  %sumsoft_1 = fadd double %sumsoft, %tmp_47


 <State 121>: 8.23ns
ST_121: sumsoft_1 [1/5] 8.23ns
:3  %sumsoft_1 = fadd double %sumsoft, %tmp_47

ST_121: stg_386 [1/1] 0.00ns
:4  br label %.preheader13


 <State 122>: 4.55ns
ST_122: i_3 [1/1] 0.00ns
.preheader11:0  %i_3 = phi i31 [ %i_8, %7 ], [ 0, %.preheader13 ]

ST_122: i_3_cast [1/1] 0.00ns
.preheader11:1  %i_3_cast = zext i31 %i_3 to i32

ST_122: tmp_28 [1/1] 2.52ns
.preheader11:2  %tmp_28 = icmp slt i32 %i_3_cast, %tmp_16

ST_122: i_8 [1/1] 2.44ns
.preheader11:3  %i_8 = add i31 %i_3, 1

ST_122: stg_391 [1/1] 0.00ns
.preheader11:4  br i1 %tmp_28, label %7, label %8

ST_122: tmp_34 [1/1] 0.00ns
:0  %tmp_34 = trunc i31 %i_3 to i9

ST_122: tmp_36 [1/1] 1.84ns
:1  %tmp_36 = add i9 %tmp_10, %tmp_34

ST_122: tmp_54_cast [1/1] 0.00ns
:2  %tmp_54_cast = sext i9 %tmp_36 to i64

ST_122: p_uOut_addr_5 [1/1] 0.00ns
:3  %p_uOut_addr_5 = getelementptr [140 x double]* @p_uOut, i64 0, i64 %tmp_54_cast

ST_122: p_uOut_load_2 [2/2] 2.71ns
:4  %p_uOut_load_2 = load double* %p_uOut_addr_5, align 8

ST_122: stg_397 [1/1] 1.57ns
:0  br i1 %tmp, label %.preheader10.preheader, label %.preheader8

ST_122: max [1/1] 0.00ns
.preheader10.preheader:0  %max = alloca i32

ST_122: stg_399 [1/1] 1.57ns
.preheader10.preheader:1  store i32 0, i32* %max

ST_122: stg_400 [1/1] 1.57ns
.preheader10.preheader:2  br label %.preheader10


 <State 123>: 2.71ns
ST_123: p_uOut_load_2 [1/2] 2.71ns
:4  %p_uOut_load_2 = load double* %p_uOut_addr_5, align 8


 <State 124>: 8.62ns
ST_124: tmp_38 [31/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 125>: 8.62ns
ST_125: tmp_38 [30/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 126>: 8.62ns
ST_126: tmp_38 [29/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 127>: 8.62ns
ST_127: tmp_38 [28/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 128>: 8.62ns
ST_128: tmp_38 [27/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 129>: 8.62ns
ST_129: tmp_38 [26/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 130>: 8.62ns
ST_130: tmp_38 [25/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 131>: 8.62ns
ST_131: tmp_38 [24/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 132>: 8.62ns
ST_132: tmp_38 [23/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 133>: 8.62ns
ST_133: tmp_38 [22/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 134>: 8.62ns
ST_134: tmp_38 [21/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 135>: 8.62ns
ST_135: tmp_38 [20/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 136>: 8.62ns
ST_136: tmp_38 [19/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 137>: 8.62ns
ST_137: tmp_38 [18/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 138>: 8.62ns
ST_138: tmp_38 [17/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 139>: 8.62ns
ST_139: tmp_38 [16/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 140>: 8.62ns
ST_140: tmp_38 [15/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 141>: 8.62ns
ST_141: tmp_38 [14/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 142>: 8.62ns
ST_142: tmp_38 [13/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 143>: 8.62ns
ST_143: tmp_38 [12/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 144>: 8.62ns
ST_144: tmp_38 [11/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 145>: 8.62ns
ST_145: tmp_38 [10/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 146>: 8.62ns
ST_146: tmp_38 [9/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 147>: 8.62ns
ST_147: tmp_38 [8/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 148>: 8.62ns
ST_148: tmp_38 [7/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 149>: 8.62ns
ST_149: tmp_38 [6/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 150>: 8.62ns
ST_150: tmp_38 [5/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 151>: 8.62ns
ST_151: tmp_38 [4/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 152>: 8.62ns
ST_152: tmp_38 [3/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 153>: 8.62ns
ST_153: tmp_38 [2/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 154>: 8.62ns
ST_154: tmp_38 [1/31] 8.62ns
:5  %tmp_38 = fdiv double %p_uOut_load_2, %sumsoft


 <State 155>: 2.71ns
ST_155: stg_433 [1/1] 2.71ns
:6  store double %tmp_38, double* %p_uOut_addr_5, align 8

ST_155: stg_434 [1/1] 0.00ns
:7  br label %.preheader11


 <State 156>: 4.55ns
ST_156: i_5 [1/1] 0.00ns
.preheader8:0  %i_5 = phi i31 [ 0, %8 ], [ %i_10, %.preheader7 ]

ST_156: phi_mul [1/1] 0.00ns
.preheader8:1  %phi_mul = phi i37 [ 0, %8 ], [ %next_mul, %.preheader7 ]

ST_156: tmp_48 [1/1] 0.00ns
.preheader8:2  %tmp_48 = trunc i37 %phi_mul to i9

ST_156: next_mul [1/1] 2.68ns
.preheader8:3  %next_mul = add i37 35, %phi_mul

ST_156: i_5_cast [1/1] 0.00ns
.preheader8:4  %i_5_cast = zext i31 %i_5 to i32

ST_156: tmp_49 [1/1] 2.52ns
.preheader8:5  %tmp_49 = icmp slt i32 %i_5_cast, %p_numLayer_load

ST_156: i_10 [1/1] 2.44ns
.preheader8:6  %i_10 = add i31 1, %i_5

ST_156: stg_442 [1/1] 0.00ns
.preheader8:7  br i1 %tmp_49, label %.preheader7.preheader, label %.loopexit9

ST_156: tmp_52 [1/1] 0.00ns
.preheader7.preheader:0  %tmp_52 = trunc i31 %i_5 to i2

ST_156: stg_444 [1/1] 1.57ns
.preheader7.preheader:1  br label %.preheader7

ST_156: max_1 [1/1] 0.00ns
.preheader10:0  %max_1 = phi i32 [ %i_9, %12 ], [ 1, %.preheader10.preheader ]

ST_156: p_layerSize_0_load_3 [1/1] 0.00ns
.preheader10:1  %p_layerSize_0_load_3 = load i32* @p_layerSize_0, align 4

ST_156: p_layerSize_1_load_2 [1/1] 0.00ns
.preheader10:2  %p_layerSize_1_load_2 = load i32* @p_layerSize_1, align 4

ST_156: p_layerSize_2_load_2 [1/1] 0.00ns
.preheader10:3  %p_layerSize_2_load_2 = load i32* @p_layerSize_2, align 4

ST_156: p_layerSize_3_load_2 [1/1] 0.00ns
.preheader10:4  %p_layerSize_3_load_2 = load i32* @p_layerSize_3, align 4

ST_156: tmp_50 [1/1] 1.57ns
.preheader10:5  %tmp_50 = call i32 @_ssdm_op_Mux.ap_auto.4i32.i2(i32 %p_layerSize_0_load_3, i32 %p_layerSize_1_load_2, i32 %p_layerSize_2_load_2, i32 %p_layerSize_3_load_2, i2 %tmp_25) nounwind

ST_156: tmp_51 [1/1] 2.52ns
.preheader10:6  %tmp_51 = icmp slt i32 %max_1, %tmp_50

ST_156: stg_452 [1/1] 0.00ns
.preheader10:7  br i1 %tmp_51, label %9, label %13

ST_156: max_load [1/1] 0.00ns
:0  %max_load = load i32* %max

ST_156: tmp_54 [1/1] 0.00ns
:2  %tmp_54 = trunc i32 %max_1 to i9

ST_156: tmp_55 [1/1] 1.84ns
:3  %tmp_55 = add i9 %tmp_54, %tmp_10

ST_156: tmp_57_cast [1/1] 0.00ns
:4  %tmp_57_cast = sext i9 %tmp_55 to i64

ST_156: p_uOut_addr_6 [1/1] 0.00ns
:5  %p_uOut_addr_6 = getelementptr [140 x double]* @p_uOut, i64 0, i64 %tmp_57_cast

ST_156: p_uOut_load_3 [2/2] 2.71ns
:6  %p_uOut_load_3 = load double* %p_uOut_addr_6, align 8

ST_156: tmp_57 [1/1] 0.00ns
:8  %tmp_57 = trunc i32 %max_load to i9

ST_156: tmp_58 [1/1] 1.84ns
:9  %tmp_58 = add i9 %tmp_57, %tmp_10

ST_156: tmp_59_cast [1/1] 0.00ns
:10  %tmp_59_cast = sext i9 %tmp_58 to i64

ST_156: p_uOut_addr_7 [1/1] 0.00ns
:11  %p_uOut_addr_7 = getelementptr [140 x double]* @p_uOut, i64 0, i64 %tmp_59_cast

ST_156: p_uOut_load_4 [2/2] 2.71ns
:12  %p_uOut_load_4 = load double* %p_uOut_addr_7, align 8

ST_156: max_load_1 [1/1] 0.00ns
:0  %max_load_1 = load i32* %max

ST_156: tmp_60 [1/1] 0.00ns
:1  %tmp_60 = sext i32 %max_load_1 to i64

ST_156: netOut_addr [1/1] 0.00ns
:2  %netOut_addr = getelementptr [35 x i32]* %netOut, i64 0, i64 %tmp_60

ST_156: stg_467 [1/1] 2.71ns
:3  store i32 1, i32* %netOut_addr, align 4

ST_156: stg_468 [1/1] 0.00ns
:4  br label %.loopexit9

ST_156: stg_469 [1/1] 0.00ns
.loopexit9:0  br label %.loopexit6

ST_156: stg_470 [1/1] 0.00ns
.loopexit6:0  ret void


 <State 157>: 4.55ns
ST_157: j_2 [1/1] 0.00ns
.preheader7:0  %j_2 = phi i32 [ %j_5, %14 ], [ 0, %.preheader7.preheader ]

ST_157: p_layerSize_0_load_4 [1/1] 0.00ns
.preheader7:1  %p_layerSize_0_load_4 = load i32* @p_layerSize_0, align 4

ST_157: p_layerSize_1_load_3 [1/1] 0.00ns
.preheader7:2  %p_layerSize_1_load_3 = load i32* @p_layerSize_1, align 4

ST_157: p_layerSize_2_load_3 [1/1] 0.00ns
.preheader7:3  %p_layerSize_2_load_3 = load i32* @p_layerSize_2, align 4

ST_157: p_layerSize_3_load_3 [1/1] 0.00ns
.preheader7:4  %p_layerSize_3_load_3 = load i32* @p_layerSize_3, align 4

ST_157: tmp_70 [1/1] 1.57ns
.preheader7:5  %tmp_70 = call i32 @_ssdm_op_Mux.ap_auto.4i32.i2(i32 %p_layerSize_0_load_4, i32 %p_layerSize_1_load_3, i32 %p_layerSize_2_load_3, i32 %p_layerSize_3_load_3, i2 %tmp_52) nounwind

ST_157: tmp_63 [1/1] 2.52ns
.preheader7:6  %tmp_63 = icmp slt i32 %j_2, %tmp_70

ST_157: j_5 [1/1] 2.44ns
.preheader7:7  %j_5 = add nsw i32 %j_2, 1

ST_157: stg_479 [1/1] 0.00ns
.preheader7:8  br i1 %tmp_63, label %14, label %.preheader8

ST_157: tmp_71 [1/1] 0.00ns
:0  %tmp_71 = trunc i32 %j_2 to i9

ST_157: tmp_72 [1/1] 1.84ns
:1  %tmp_72 = add i9 %tmp_48, %tmp_71

ST_157: tmp_75_cast [1/1] 0.00ns
:2  %tmp_75_cast = zext i9 %tmp_72 to i64

ST_157: p_uOut_addr_8 [1/1] 0.00ns
:4  %p_uOut_addr_8 = getelementptr [140 x double]* @p_uOut, i64 0, i64 %tmp_75_cast

ST_157: p_uOut_load_5 [2/2] 2.71ns
:5  %p_uOut_load_5 = load double* %p_uOut_addr_8, align 8


 <State 158>: 5.42ns
ST_158: uOut_addr [1/1] 0.00ns
:3  %uOut_addr = getelementptr [140 x double]* %uOut, i64 0, i64 %tmp_75_cast

ST_158: p_uOut_load_5 [1/2] 2.71ns
:5  %p_uOut_load_5 = load double* %p_uOut_addr_8, align 8

ST_158: stg_487 [1/1] 2.71ns
:6  store double %p_uOut_load_5, double* %uOut_addr, align 8

ST_158: stg_488 [1/1] 0.00ns
:7  br label %.preheader7


 <State 159>: 2.71ns
ST_159: p_uOut_load_3 [1/2] 2.71ns
:6  %p_uOut_load_3 = load double* %p_uOut_addr_6, align 8

ST_159: p_uOut_load_4 [1/2] 2.71ns
:12  %p_uOut_load_4 = load double* %p_uOut_addr_7, align 8


 <State 160>: 8.20ns
ST_160: tmp_53 [1/1] 0.00ns
:1  %tmp_53 = sext i32 %max_1 to i64

ST_160: tmp_56 [1/1] 0.00ns
:7  %tmp_56 = sext i32 %max_load to i64

ST_160: p_uOut_load_3_to_int [1/1] 0.00ns
:13  %p_uOut_load_3_to_int = bitcast double %p_uOut_load_3 to i64

ST_160: tmp_59 [1/1] 0.00ns
:14  %tmp_59 = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %p_uOut_load_3_to_int, i32 52, i32 62)

ST_160: tmp_61 [1/1] 0.00ns
:15  %tmp_61 = trunc i64 %p_uOut_load_3_to_int to i52

ST_160: p_uOut_load_4_to_int [1/1] 0.00ns
:16  %p_uOut_load_4_to_int = bitcast double %p_uOut_load_4 to i64

ST_160: tmp_62 [1/1] 0.00ns
:17  %tmp_62 = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %p_uOut_load_4_to_int, i32 52, i32 62)

ST_160: tmp_64 [1/1] 0.00ns
:18  %tmp_64 = trunc i64 %p_uOut_load_4_to_int to i52

ST_160: notlhs [1/1] 2.11ns
:19  %notlhs = icmp ne i11 %tmp_59, -1

ST_160: notrhs [1/1] 2.64ns
:20  %notrhs = icmp eq i52 %tmp_61, 0

ST_160: tmp_65 [1/1] 1.37ns
:21  %tmp_65 = or i1 %notrhs, %notlhs

ST_160: notlhs1 [1/1] 2.11ns
:22  %notlhs1 = icmp ne i11 %tmp_62, -1

ST_160: notrhs2 [1/1] 2.64ns
:23  %notrhs2 = icmp eq i52 %tmp_64, 0

ST_160: tmp_66 [1/1] 1.37ns
:24  %tmp_66 = or i1 %notrhs2, %notlhs1

ST_160: tmp_67 [1/1] 1.37ns
:25  %tmp_67 = and i1 %tmp_65, %tmp_66

ST_160: tmp_68 [1/1] 6.83ns
:26  %tmp_68 = fcmp ogt double %p_uOut_load_3, %p_uOut_load_4

ST_160: tmp_69 [1/1] 1.37ns
:27  %tmp_69 = and i1 %tmp_67, %tmp_68

ST_160: stg_508 [1/1] 0.00ns
:28  br i1 %tmp_69, label %10, label %11

ST_160: netOut_addr_2 [1/1] 0.00ns
:0  %netOut_addr_2 = getelementptr [35 x i32]* %netOut, i64 0, i64 %tmp_53

ST_160: stg_510 [1/1] 2.71ns
:1  store i32 0, i32* %netOut_addr_2, align 4

ST_160: stg_511 [1/1] 0.00ns
:2  br label %12

ST_160: netOut_addr_1 [1/1] 0.00ns
:0  %netOut_addr_1 = getelementptr [35 x i32]* %netOut, i64 0, i64 %tmp_56

ST_160: stg_513 [1/1] 2.71ns
:1  store i32 0, i32* %netOut_addr_1, align 4

ST_160: stg_514 [1/1] 1.57ns
:2  store i32 %max_1, i32* %max

ST_160: stg_515 [1/1] 0.00ns
:3  br label %12

ST_160: i_9 [1/1] 2.44ns
:0  %i_9 = add nsw i32 %max_1, 1

ST_160: stg_517 [1/1] 0.00ns
:1  br label %.preheader10



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112
	State 113
	State 114
	State 115
	State 116
	State 117
	State 118
	State 119
	State 120
	State 121
	State 122
	State 123
	State 124
	State 125
	State 126
	State 127
	State 128
	State 129
	State 130
	State 131
	State 132
	State 133
	State 134
	State 135
	State 136
	State 137
	State 138
	State 139
	State 140
	State 141
	State 142
	State 143
	State 144
	State 145
	State 146
	State 147
	State 148
	State 149
	State 150
	State 151
	State 152
	State 153
	State 154
	State 155
	State 156
	State 157
	State 158
	State 159
	State 160


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
