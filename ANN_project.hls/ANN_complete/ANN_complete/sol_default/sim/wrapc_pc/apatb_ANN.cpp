// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "config_r"
#define AUTOTB_TVIN_config_r  "../tv/cdatafile/c.ANN.autotvin_config_r.dat"
// wrapc file define: "uOut"
#define AUTOTB_TVOUT_uOut  "../tv/cdatafile/c.ANN.autotvout_uOut.dat"
#define AUTOTB_TVIN_uOut  "../tv/cdatafile/c.ANN.autotvin_uOut.dat"
// wrapc file define: "netIn"
#define AUTOTB_TVIN_netIn  "../tv/cdatafile/c.ANN.autotvin_netIn.dat"
// wrapc file define: "netOut"
#define AUTOTB_TVOUT_netOut  "../tv/cdatafile/c.ANN.autotvout_netOut.dat"
#define AUTOTB_TVIN_netOut  "../tv/cdatafile/c.ANN.autotvin_netOut.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "uOut"
#define AUTOTB_TVOUT_PC_uOut  "../tv/rtldatafile/rtl.ANN.autotvout_uOut.dat"
// tvout file define: "netOut"
#define AUTOTB_TVOUT_PC_netOut  "../tv/rtldatafile/rtl.ANN.autotvout_netOut.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			config_r_depth = 0;
			uOut_depth = 0;
			netIn_depth = 0;
			netOut_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{config_r " << config_r_depth << "}\n";
			total_list << "{uOut " << uOut_depth << "}\n";
			total_list << "{netIn " << netIn_depth << "}\n";
			total_list << "{netOut " << netOut_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int config_r_depth;
		int uOut_depth;
		int netIn_depth;
		int netOut_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define ANN AESL_ORIG_DUT_ANN
extern void ANN (
const int config[6],
const double WandB[4][35][36],
double uOut[4][35],
const double netIn[35],
int netOut[35]);
#undef ANN

void ANN (
const int config[6],
const double WandB[4][35][36],
double uOut[4][35],
const double netIn[35],
int netOut[35])
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "uOut"
		aesl_fh.read(AUTOTB_TVOUT_PC_uOut, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_uOut, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_uOut, AESL_token); // data

			sc_bv<64> *uOut_pc_buffer = new sc_bv<64>[140];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'uOut', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'uOut', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					uOut_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_uOut, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_uOut))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: uOut
				{
					// bitslice(63, 0)
					// {
						// celement: uOut(63, 0)
						// {
							sc_lv<64>* uOut_lv0_0_3_1_lv1_0_34_1 = new sc_lv<64>[140];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: uOut(63, 0)
						{
							// carray: (0) => (3) @ (1)
							for (int i_0 = 0; i_0 <= 3; i_0 += 1)
							{
								// carray: (0) => (34) @ (1)
								for (int i_1 = 0; i_1 <= 34; i_1 += 1)
								{
									if (&(uOut[0][0]) != NULL) // check the null address if the c port is array or others
									{
										uOut_lv0_0_3_1_lv1_0_34_1[hls_map_index++].range(63, 0) = sc_bv<64>(uOut_pc_buffer[hls_map_index].range(63, 0));
									}
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: uOut(63, 0)
						{
							// carray: (0) => (3) @ (1)
							for (int i_0 = 0; i_0 <= 3; i_0 += 1)
							{
								// carray: (0) => (34) @ (1)
								for (int i_1 = 0; i_1 <= 34; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : uOut[i_0][i_1]
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : uOut[0][0]
									// output_left_conversion : *(long long*)&uOut[i_0][i_1]
									// output_type_conversion : (uOut_lv0_0_3_1_lv1_0_34_1[hls_map_index++]).to_uint64()
									if (&(uOut[0][0]) != NULL) // check the null address if the c port is array or others
									{
										*(long long*)&uOut[i_0][i_1] = (uOut_lv0_0_3_1_lv1_0_34_1[hls_map_index++]).to_uint64();
									}
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] uOut_pc_buffer;
		}

		// output port post check: "netOut"
		aesl_fh.read(AUTOTB_TVOUT_PC_netOut, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_netOut, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_netOut, AESL_token); // data

			sc_bv<32> *netOut_pc_buffer = new sc_bv<32>[35];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'netOut', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'netOut', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					netOut_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_netOut, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_netOut))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: netOut
				{
					// bitslice(31, 0)
					// {
						// celement: netOut(31, 0)
						// {
							sc_lv<32>* netOut_lv0_0_34_1 = new sc_lv<32>[35];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: netOut(31, 0)
						{
							// carray: (0) => (34) @ (1)
							for (int i_0 = 0; i_0 <= 34; i_0 += 1)
							{
								if (&(netOut[0]) != NULL) // check the null address if the c port is array or others
								{
									netOut_lv0_0_34_1[hls_map_index++].range(31, 0) = sc_bv<32>(netOut_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: netOut(31, 0)
						{
							// carray: (0) => (34) @ (1)
							for (int i_0 = 0; i_0 <= 34; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : netOut[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : netOut[0]
								// output_left_conversion : netOut[i_0]
								// output_type_conversion : (netOut_lv0_0_34_1[hls_map_index++]).to_uint64()
								if (&(netOut[0]) != NULL) // check the null address if the c port is array or others
								{
									netOut[i_0] = (netOut_lv0_0_34_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] netOut_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "config_r"
		char* tvin_config_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_config_r);

		// "uOut"
		char* tvin_uOut = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_uOut);
		char* tvout_uOut = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_uOut);

		// "netIn"
		char* tvin_netIn = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_netIn);

		// "netOut"
		char* tvin_netOut = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_netOut);
		char* tvout_netOut = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_netOut);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_config_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_config_r, tvin_config_r);

		sc_bv<32>* config_r_tvin_wrapc_buffer = new sc_bv<32>[6];

		// RTL Name: config_r
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: config(31, 0)
				{
					// carray: (0) => (5) @ (1)
					for (int i_0 = 0; i_0 <= 5; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : config[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : config[0]
						// regulate_c_name       : config
						// input_type_conversion : config[i_0]
						if (&(config[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> config_tmp_mem;
							config_tmp_mem = config[i_0];
							config_r_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = config_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 6; i++)
		{
			sprintf(tvin_config_r, "%s\n", (config_r_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_config_r, tvin_config_r);
		}

		tcl_file.set_num(6, &tcl_file.config_r_depth);
		sprintf(tvin_config_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_config_r, tvin_config_r);

		// release memory allocation
		delete [] config_r_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_uOut, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_uOut, tvin_uOut);

		sc_bv<64>* uOut_tvin_wrapc_buffer = new sc_bv<64>[140];

		// RTL Name: uOut
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: uOut(63, 0)
				{
					// carray: (0) => (3) @ (1)
					for (int i_0 = 0; i_0 <= 3; i_0 += 1)
					{
						// carray: (0) => (34) @ (1)
						for (int i_1 = 0; i_1 <= 34; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : uOut[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : uOut[0][0]
							// regulate_c_name       : uOut
							// input_type_conversion : *(long long*)&uOut[i_0][i_1]
							if (&(uOut[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<64> uOut_tmp_mem;
								uOut_tmp_mem = *(long long*)&uOut[i_0][i_1];
								uOut_tvin_wrapc_buffer[hls_map_index++].range(63, 0) = uOut_tmp_mem.range(63, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 140; i++)
		{
			sprintf(tvin_uOut, "%s\n", (uOut_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_uOut, tvin_uOut);
		}

		tcl_file.set_num(140, &tcl_file.uOut_depth);
		sprintf(tvin_uOut, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_uOut, tvin_uOut);

		// release memory allocation
		delete [] uOut_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_netIn, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_netIn, tvin_netIn);

		sc_bv<64>* netIn_tvin_wrapc_buffer = new sc_bv<64>[35];

		// RTL Name: netIn
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: netIn(63, 0)
				{
					// carray: (0) => (34) @ (1)
					for (int i_0 = 0; i_0 <= 34; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : netIn[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : netIn[0]
						// regulate_c_name       : netIn
						// input_type_conversion : *(long long*)&netIn[i_0]
						if (&(netIn[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> netIn_tmp_mem;
							netIn_tmp_mem = *(long long*)&netIn[i_0];
							netIn_tvin_wrapc_buffer[hls_map_index++].range(63, 0) = netIn_tmp_mem.range(63, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 35; i++)
		{
			sprintf(tvin_netIn, "%s\n", (netIn_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_netIn, tvin_netIn);
		}

		tcl_file.set_num(35, &tcl_file.netIn_depth);
		sprintf(tvin_netIn, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_netIn, tvin_netIn);

		// release memory allocation
		delete [] netIn_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_netOut, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_netOut, tvin_netOut);

		sc_bv<32>* netOut_tvin_wrapc_buffer = new sc_bv<32>[35];

		// RTL Name: netOut
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: netOut(31, 0)
				{
					// carray: (0) => (34) @ (1)
					for (int i_0 = 0; i_0 <= 34; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : netOut[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : netOut[0]
						// regulate_c_name       : netOut
						// input_type_conversion : netOut[i_0]
						if (&(netOut[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> netOut_tmp_mem;
							netOut_tmp_mem = netOut[i_0];
							netOut_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = netOut_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 35; i++)
		{
			sprintf(tvin_netOut, "%s\n", (netOut_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_netOut, tvin_netOut);
		}

		tcl_file.set_num(35, &tcl_file.netOut_depth);
		sprintf(tvin_netOut, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_netOut, tvin_netOut);

		// release memory allocation
		delete [] netOut_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		AESL_ORIG_DUT_ANN(config, WandB, uOut, netIn, netOut);


		// [[transaction]]
		sprintf(tvout_uOut, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_uOut, tvout_uOut);

		sc_bv<64>* uOut_tvout_wrapc_buffer = new sc_bv<64>[140];

		// RTL Name: uOut
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: uOut(63, 0)
				{
					// carray: (0) => (3) @ (1)
					for (int i_0 = 0; i_0 <= 3; i_0 += 1)
					{
						// carray: (0) => (34) @ (1)
						for (int i_1 = 0; i_1 <= 34; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : uOut[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : uOut[0][0]
							// regulate_c_name       : uOut
							// input_type_conversion : *(long long*)&uOut[i_0][i_1]
							if (&(uOut[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<64> uOut_tmp_mem;
								uOut_tmp_mem = *(long long*)&uOut[i_0][i_1];
								uOut_tvout_wrapc_buffer[hls_map_index++].range(63, 0) = uOut_tmp_mem.range(63, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 140; i++)
		{
			sprintf(tvout_uOut, "%s\n", (uOut_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_uOut, tvout_uOut);
		}

		tcl_file.set_num(140, &tcl_file.uOut_depth);
		sprintf(tvout_uOut, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_uOut, tvout_uOut);

		// release memory allocation
		delete [] uOut_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_netOut, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_netOut, tvout_netOut);

		sc_bv<32>* netOut_tvout_wrapc_buffer = new sc_bv<32>[35];

		// RTL Name: netOut
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: netOut(31, 0)
				{
					// carray: (0) => (34) @ (1)
					for (int i_0 = 0; i_0 <= 34; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : netOut[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : netOut[0]
						// regulate_c_name       : netOut
						// input_type_conversion : netOut[i_0]
						if (&(netOut[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> netOut_tmp_mem;
							netOut_tmp_mem = netOut[i_0];
							netOut_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = netOut_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 35; i++)
		{
			sprintf(tvout_netOut, "%s\n", (netOut_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_netOut, tvout_netOut);
		}

		tcl_file.set_num(35, &tcl_file.netOut_depth);
		sprintf(tvout_netOut, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_netOut, tvout_netOut);

		// release memory allocation
		delete [] netOut_tvout_wrapc_buffer;

		// release memory allocation: "config_r"
		delete [] tvin_config_r;
		// release memory allocation: "uOut"
		delete [] tvout_uOut;
		delete [] tvin_uOut;
		// release memory allocation: "netIn"
		delete [] tvin_netIn;
		// release memory allocation: "netOut"
		delete [] tvout_netOut;
		delete [] tvin_netOut;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

