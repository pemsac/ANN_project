/**
 *
 * Carlos III University of Madrid.
 *
 * Master Final Thesis: Heartbeat classifier based on ANN (Artificial Neural
 * Network).
 *
 * Author: Pedro Marcos Solórzano
 * Tutor: Luis Mengibar Pozo (Tutor)
 *
 *
 * Back-propagation trainer for feedforward ANN
 * Source file
 *
 *
 */

#include "Training.h"

/*
 * Empty constructor
 */
Training::Training (){}


/*
 * Constructor method. Create a new ANN with random weights and train it. These
 * parameters must be set:
 * - number of layers (including input & output layers)
 * - number of neurons in each layer
 * - momentum for the training
 * - learning rate
 * - delta errors for each neuron.
 */
Training::Training (int layers, int *layerSizes, double momentum,
                    double learningRate, double **deltaError){
  int i, j;
  double ***weights;
  /*
   * Memory allocation
   */
  _deltaError = new double*[layers];
  for(i=1; i<layers; ++i)
    _deltaError[i] = new double[layerSizes];

  weights = new double**[layers];
  for(i=1; i<layers; ++i)
    weights[i]=new double*[layerSizes[i]];
  for(i=1; i<layers; ++i)
    for(j=0; j<layerSizes[i]; ++j)
      weights[i][j]=new double[layerSizes[i-1]+1];

  /*
   * Store random weights to the matrix
   */
  for(i=1; i<layers; ++i)
    for(j=0; j<layerSizes[i]; ++j)
      for(k=0; k<layerSizes[i-1]+1; ++k)
	weights[i][j][k]=(double)(rand())/(RAND_MAX/2) - 1;


}


Training::~Training ()
{
  // TODO Auto-generated destructor stub
}

