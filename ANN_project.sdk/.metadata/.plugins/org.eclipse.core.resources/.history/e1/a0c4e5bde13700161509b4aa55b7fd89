/**
 *
 * Carlos III University of Madrid.
 *
 * Master Final Thesis: Heartbeat classifier based on ANN (Artificial Neural
 * Network).
 *
 * Author: Pedro Marcos Solórzano
 * Tutor: Luis Mengibar Pozo (Tutor)
 *
 *
 * Main source file
 *
 *
 */

#include "main.hpp"

int main(void)
{
  /*
   * Local declarations.
   */
  XGpio gpio;
  FRESULT fStatus;
  FATFS fileSystem;
  FIL fWeight, fTrain, fTest, fInput;
  int status, mode, newANN = 1;
  u8 *fWeightBuff, *fTrainBuff, *fInputBuff, *fTestBuff;
  UINT fBytesRead;

  /*
   * LED's GPIO Initialization
   */
  status = XGpio_Initialize(&gpio, GPIO_DEVICE_ID);
  if (status != XST_SUCCESS)
    {
      cerr << "ERROR: GPIO failure." << endl;
      return XST_FAILURE;
    }

  XGpio_SetDataDirection(&gpio, LED_CHANNEL, LED_DIRECTION_MASK);
  XGpio_DiscreteWrite(&gpio, LED_CHANNEL, LED_READY_STATE);

  /*
   * Get working mode
   */
  mode = XGpio_DiscreteRead(&gpio, SW_CHANNEL)%2;

  /*
   * Introduction
   */
  cout << endl<<"ARTIFITIAL NEURONAL NETWORK"<<endl;
  if(mode)
    cout << "Back-propagation training for feedforward ANN"<<endl;
  else
    cout << "Feedforward ANN" << endl;

  /*
   * Initialize the memory file system
   */
  fStatus = f_mount(&fileSystem, FS_PATH, 0);
  if (fStatus != FR_OK) {
      cerr<<"ERROR: impossible to mount SD memory on "<<FS_PATH<<endl;
      XGpio_DiscreteWrite(&gpio,LED_CHANNEL,LED_ERROR_STATE);
      return XST_FAILURE;
  }

  /*
   * Open files
   */
  if (mode){

      fStatus = f_open(&fTrain, TRAINING_FILE_DIR , FA_READ);
      if (fStatus) {
	  cerr << "ERROR: Training file not found in " << FS_PATH <<
	      TRAINING_FILE_DIR << endl;
	  XGpio_DiscreteWrite(&gpio, LED_CHANNEL, LED_FILE_ERROR_STATE);
	  return XST_FAILURE;
      }
      fStatus = f_open(&fTest, TEST_FILE_DIR , FA_READ);
      if (fStatus) {
	  cerr << "ERROR: Test file not found in " << FS_PATH <<
	      TEST_FILE_DIR << endl;
	  XGpio_DiscreteWrite(&gpio, LED_CHANNEL, LED_FILE_ERROR_STATE);
	  return XST_FAILURE;
      }
      fStatus = f_open(&fWeight, WEIGHTS_FILE_DIR , FA_WRITE | FA_READ);
      if (!fStatus) {
	  newANN=0;
	  fStatus = f_open(&fWeight, WEIGHTS_FILE_DIR,
	                   FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
	  if (fStatus) {
	      cerr << "ERROR: Impossible to open Weight file in " <<
		  FS_PATH << TEST_FILE_DIR << endl;
	      XGpio_DiscreteWrite(&gpio, LED_CHANNEL, LED_FILE_ERROR_STATE);
	      return XST_FAILURE;
	  }
      }
  }
  else{
      fStatus = f_open(&fWeight, WEIGHTS_FILE_DIR , FA_READ);
      if (fStatus) {
	  cerr << "ERROR: Weights file not found in " << FS_PATH <<
	      WEIGHTS_FILE_DIR << endl;
	  XGpio_DiscreteWrite(&gpio, LED_CHANNEL ,LED_FILE_ERROR_STATE);
	  return XST_FAILURE;
      }
      fStatus = f_open(&fInput, INPUT_FILE_DIR , FA_READ);
      if (fStatus) {
	  cerr << "ERROR: Inputs file not found in " << FS_PATH <<
	      WEIGHTS_FILE_DIR << endl;
	  XGpio_DiscreteWrite(&gpio, LED_CHANNEL ,LED_FILE_ERROR_STATE);
	  return XST_FAILURE;
      }
  }
  /*
   * Read files & allocate buffers
   */
  if(mode==1){

      fTrainBuff = new u8[fTrain.fsize];
      fStatus = f_read(&fTrain, (void*)fTrainBuff, fTrain.fsize, &fBytesRead);
      if (fStatus || fTrain.fsize!=fBytesRead) {
	  cerr << "ERROR: Failed reading file "<< FS_PATH << TRAINING_FILE_DIR
	      << ". "<< fBytesRead << " bytes have been read."<<endl;
	  XGpio_DiscreteWrite(&gpio,LED_CHANNEL,LED_FILE_ERROR_STATE);
	  return XST_FAILURE;
      }

      fTestBuff = new u8[fTest.fsize];
      fStatus = f_read(&fTest, (void*)fTestBuff, fTest.fsize, &fBytesRead);
      if (fStatus || fTest.fsize!=fBytesRead) {
	  cerr << "ERROR: Failed reading file "<< FS_PATH << TEST_FILE_DIR
	      << ". "<< fBytesRead << " bytes have been read."<<endl;
	  XGpio_DiscreteWrite(&gpio,LED_CHANNEL,LED_FILE_ERROR_STATE);
	  return XST_FAILURE;
      }

      if(!newANN)
	{
	  fWeightBuff = new u8[fWeight.fsize];
	  fStatus = f_read(&fWeight, (void*)fWeightBuff, fWeight.fsize, &fBytesRead);
	  if (fStatus || fWeight.fsize!=fBytesRead)
	    {
	      cerr << "ERROR: Failed reading file "<< FS_PATH << WEIGHTS_FILE_DIR
		  << ". "<< fBytesRead << " bytes have been read."<<endl;
	      XGpio_DiscreteWrite(&gpio,LED_CHANNEL,LED_FILE_ERROR_STATE);
	      return XST_FAILURE;
	    }
	}
  }


  /*
   * Open weights file
   */

  return 0;
}
