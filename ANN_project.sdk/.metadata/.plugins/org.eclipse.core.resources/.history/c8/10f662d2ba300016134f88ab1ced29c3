
#include "BackProp.h"
// NeuralNet.cpp : Defines the entry point for the console application.
//

#include "backprop.h"
#include "stdio.h"
int main(int argc, char* argv[])
{
	printf("TEST: %f\r\n",0.99);

	// prepare XOR traing data
	double data[][4]={
				0,	0,	0,	0,
				0,	0,	1,	1,
				0,	1,	0,	1,
				0,	1,	1,	0,
				1,	0,	0,	1,
				1,	0,	1,	0,
				1,	1,	0,	0,
				1,	1,	1,	1 };

	// prepare test data	
	double testData[][3]={
								0,      0,      0,
                                0,      0,      1,
                                0,      1,      0,
                                0,      1,      1,
                                1,      0,      0,
                                1,      0,      1,
                                1,      1,      0,
                                1,      1,      1};

	
	// defining a net with 4 layers having 3,3,3, and 1 neuron respectively,
	// the first layer is input layer i.e. simply holder for the input parameters
	// and has to be the same size as the no of input parameters, in out example 3
	int numLayers = 4, lSz[4] = {3,3,2,1};

	
	// Learing rate - beta
	// momentum - alpha
	// Threshhold - thresh (value of target mse, training stops once it is achieved)
	double beta = 0.3, alpha = 0.1, Thresh =  0.00001;

	
	// maximum no of iterations during training
	int num_iter = 2000000, i;
	
	// Creating the net
	CBackProp *bp = new CBackProp(numLayers, lSz, beta, alpha);
	
	printf("Now training the network....\n\r");
	for ( i=0; i<num_iter ; i++)
	{
		
		bp->bpgt(data[i%8], &data[i%8][3]);

		if( bp->mse(&data[i%8][3]) < Thresh) {
		    printf("Network Trained. Threshold value achieved in %i iterations.\n\r",i);
		    printf("MSE:  %i.%i\r\n\r\n",bp->mse(&data[i%8][3]));
			break;
		}
		if ( i%(num_iter/10) == 0 )
		  printf( "MSE:  %lf ... Training...\n\r", bp->mse(&data[i%8][3]));

	}
	
	if ( i == num_iter )
	  xil_printf( "%i iterations completed... MSE: %lf\r\n",i ,bp->mse(&data[(i-1)%8][3]));

	xil_printf( "Now using the trained network to make predctions on test data....\r\n");
	for ( i = 0 ; i < 8 ; i++ )
	{
		bp->ffwd(testData[i]);
		xil_printf("%lf  %lf  %lf  %lf\r\n", testData[i][0], testData[i][1], testData[i][2], bp->Out(0));
	}

	return 0;
}



