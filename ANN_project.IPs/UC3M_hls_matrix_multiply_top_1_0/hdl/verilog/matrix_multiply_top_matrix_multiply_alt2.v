// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_multiply_top_matrix_multiply_alt2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st14_fsm_2 = 3'b100;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv5_1B = 5'b11011;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv4_9 = 4'b1001;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [3:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [4:0] indvar_flatten1_reg_111;
reg   [1:0] Col_assign_2_reg_122;
reg   [3:0] indvar_flatten_reg_133;
reg   [1:0] Row_assign_reg_144;
reg   [1:0] Col_assign_reg_155;
wire   [0:0] exitcond_flatten1_fu_178_p2;
reg   [0:0] exitcond_flatten1_reg_370;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_62;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg    ap_reg_ppiten_pp0_it7 = 1'b0;
reg    ap_reg_ppiten_pp0_it8 = 1'b0;
reg    ap_reg_ppiten_pp0_it9 = 1'b0;
reg    ap_reg_ppiten_pp0_it10 = 1'b0;
reg    ap_reg_ppiten_pp0_it11 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it3;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it4;
wire   [4:0] indvar_flatten_next1_fu_184_p2;
wire   [1:0] Col_assign_2_mid2_fu_228_p3;
reg   [1:0] Col_assign_2_mid2_reg_379;
wire   [1:0] Col_assign_mid2_fu_248_p3;
reg   [1:0] Col_assign_mid2_reg_388;
wire   [1:0] Row_assign_mid2_fu_256_p3;
reg   [1:0] Row_assign_mid2_reg_393;
wire   [1:0] c_fu_264_p2;
wire   [3:0] indvar_flatten_next_fu_276_p3;
wire   [0:0] tmp_fu_284_p2;
reg   [0:0] tmp_reg_410;
reg   [0:0] ap_reg_ppstg_tmp_reg_410_pp0_it2;
reg   [0:0] ap_reg_ppstg_tmp_reg_410_pp0_it3;
reg   [0:0] ap_reg_ppstg_tmp_reg_410_pp0_it4;
reg   [0:0] ap_reg_ppstg_tmp_reg_410_pp0_it5;
reg   [0:0] ap_reg_ppstg_tmp_reg_410_pp0_it6;
reg   [0:0] ap_reg_ppstg_tmp_reg_410_pp0_it7;
reg   [0:0] ap_reg_ppstg_tmp_reg_410_pp0_it8;
reg   [0:0] ap_reg_ppstg_tmp_reg_410_pp0_it9;
reg   [0:0] ap_reg_ppstg_tmp_reg_410_pp0_it10;
wire   [0:0] tmp_s_fu_289_p2;
reg   [0:0] tmp_s_reg_414;
reg   [0:0] ap_reg_ppstg_tmp_s_reg_414_pp0_it2;
reg   [0:0] ap_reg_ppstg_tmp_s_reg_414_pp0_it3;
reg   [0:0] ap_reg_ppstg_tmp_s_reg_414_pp0_it4;
reg   [0:0] ap_reg_ppstg_tmp_s_reg_414_pp0_it5;
reg   [0:0] ap_reg_ppstg_tmp_s_reg_414_pp0_it6;
reg   [0:0] ap_reg_ppstg_tmp_s_reg_414_pp0_it7;
reg   [0:0] ap_reg_ppstg_tmp_s_reg_414_pp0_it8;
reg   [0:0] ap_reg_ppstg_tmp_s_reg_414_pp0_it9;
reg   [0:0] ap_reg_ppstg_tmp_s_reg_414_pp0_it10;
wire   [4:0] tmp_19_fu_359_p2;
reg   [4:0] tmp_19_reg_428;
reg   [4:0] ap_reg_ppstg_tmp_19_reg_428_pp0_it2;
reg   [4:0] ap_reg_ppstg_tmp_19_reg_428_pp0_it3;
reg   [4:0] ap_reg_ppstg_tmp_19_reg_428_pp0_it4;
reg   [3:0] C_addr_reg_443;
reg   [3:0] ap_reg_ppstg_C_addr_reg_443_pp0_it6;
reg   [3:0] ap_reg_ppstg_C_addr_reg_443_pp0_it7;
reg   [3:0] ap_reg_ppstg_C_addr_reg_443_pp0_it8;
reg   [3:0] ap_reg_ppstg_C_addr_reg_443_pp0_it9;
reg   [3:0] ap_reg_ppstg_C_addr_reg_443_pp0_it10;
reg   [3:0] sum_mult_addr_reg_448;
reg   [3:0] ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it6;
reg   [3:0] ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it7;
reg   [3:0] ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it8;
reg   [3:0] ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it9;
wire   [31:0] grp_fu_172_p2;
reg   [31:0] mult_reg_454;
reg   [31:0] ap_reg_ppstg_mult_reg_454_pp0_it6;
reg   [31:0] ap_reg_ppstg_mult_reg_454_pp0_it7;
reg   [31:0] ap_reg_ppstg_mult_reg_454_pp0_it8;
reg   [31:0] ap_reg_ppstg_mult_reg_454_pp0_it9;
wire   [31:0] sum_mult_q0;
wire   [31:0] grp_fu_166_p2;
reg   [31:0] tmp_4_reg_465;
wire   [3:0] sum_mult_address0;
reg    sum_mult_ce0;
wire   [3:0] sum_mult_address1;
reg    sum_mult_ce1;
reg    sum_mult_we1;
reg   [31:0] sum_mult_d1;
reg   [1:0] Col_assign_2_phi_fu_126_p4;
reg   [1:0] Row_assign_phi_fu_148_p4;
wire  signed [63:0] tmp_22_cast_fu_340_p1;
wire  signed [63:0] tmp_23_cast_fu_354_p1;
wire  signed [63:0] tmp_24_cast_fu_365_p1;
wire   [0:0] exitcond_flatten6_fu_196_p2;
wire   [0:0] exitcond7_fu_216_p2;
wire   [0:0] not_exitcond_flatten_fu_210_p2;
wire   [1:0] k_fu_190_p2;
wire   [1:0] Row_assign_mid_fu_202_p3;
wire   [0:0] exitcond_mid_fu_222_p2;
wire   [0:0] tmp_14_fu_242_p2;
wire   [1:0] r_fu_236_p2;
wire   [3:0] indvar_flatten_op_fu_270_p2;
wire   [3:0] tmp_12_fu_297_p3;
wire   [4:0] p_shl1_cast_fu_304_p1;
wire   [4:0] tmp_i_i_cast_fu_294_p1;
wire   [3:0] tmp_15_fu_317_p3;
wire   [4:0] p_shl_cast_fu_324_p1;
wire   [4:0] tmp_1_cast_fu_314_p1;
wire   [4:0] tmp_16_fu_328_p2;
wire   [4:0] tmp_17_fu_334_p2;
wire   [4:0] tmp_13_fu_308_p2;
wire   [4:0] tmp_i_i4_cast_fu_345_p1;
wire   [4:0] tmp_18_fu_348_p2;
wire    grp_fu_166_ce;
wire    grp_fu_172_ce;
reg    ap_sig_cseq_ST_st14_fsm_2;
reg    ap_sig_bdd_376;
reg   [2:0] ap_NS_fsm;
reg    ap_sig_bdd_228;


matrix_multiply_top_matrix_multiply_alt2_sum_mult #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
sum_mult_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( sum_mult_address0 ),
    .ce0( sum_mult_ce0 ),
    .q0( sum_mult_q0 ),
    .address1( sum_mult_address1 ),
    .ce1( sum_mult_ce1 ),
    .we1( sum_mult_we1 ),
    .d1( sum_mult_d1 )
);

matrix_multiply_top_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_multiply_top_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( sum_mult_q0 ),
    .din1( mult_reg_454 ),
    .ce( grp_fu_166_ce ),
    .dout( grp_fu_166_p2 )
);

matrix_multiply_top_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_multiply_top_fmul_32ns_32ns_32_4_max_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( A_q0 ),
    .din1( B_q0 ),
    .ce( grp_fu_172_ce ),
    .dout( grp_fu_172_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten1_fu_178_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten1_fu_178_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten1_fu_178_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it10
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it11
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it7
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it8
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it9
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten1_reg_370 == ap_const_lv1_0))) begin
        Col_assign_2_reg_122 <= Col_assign_2_mid2_reg_379;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        Col_assign_2_reg_122 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten1_fu_178_p2 == ap_const_lv1_0))) begin
        Col_assign_reg_155 <= c_fu_264_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        Col_assign_reg_155 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten1_reg_370 == ap_const_lv1_0))) begin
        Row_assign_reg_144 <= Row_assign_mid2_reg_393;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        Row_assign_reg_144 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten1_fu_178_p2 == ap_const_lv1_0))) begin
        indvar_flatten1_reg_111 <= indvar_flatten_next1_fu_184_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        indvar_flatten1_reg_111 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten1_fu_178_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_133 <= indvar_flatten_next_fu_276_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        indvar_flatten_reg_133 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it4 == ap_const_lv1_0)) begin
        C_addr_reg_443 <= tmp_24_cast_fu_365_p1;
        mult_reg_454 <= grp_fu_172_p2;
        sum_mult_addr_reg_448 <= tmp_24_cast_fu_365_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten1_fu_178_p2 == ap_const_lv1_0))) begin
        Col_assign_2_mid2_reg_379 <= Col_assign_2_mid2_fu_228_p3;
        Row_assign_mid2_reg_393 <= Row_assign_mid2_fu_256_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten1_fu_178_p2 == ap_const_lv1_0))) begin
        Col_assign_mid2_reg_388 <= Col_assign_mid2_fu_248_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_C_addr_reg_443_pp0_it10 <= ap_reg_ppstg_C_addr_reg_443_pp0_it9;
        ap_reg_ppstg_C_addr_reg_443_pp0_it6 <= C_addr_reg_443;
        ap_reg_ppstg_C_addr_reg_443_pp0_it7 <= ap_reg_ppstg_C_addr_reg_443_pp0_it6;
        ap_reg_ppstg_C_addr_reg_443_pp0_it8 <= ap_reg_ppstg_C_addr_reg_443_pp0_it7;
        ap_reg_ppstg_C_addr_reg_443_pp0_it9 <= ap_reg_ppstg_C_addr_reg_443_pp0_it8;
        ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it2 <= ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it1;
        ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it3 <= ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it2;
        ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it4 <= ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it3;
        ap_reg_ppstg_mult_reg_454_pp0_it6 <= mult_reg_454;
        ap_reg_ppstg_mult_reg_454_pp0_it7 <= ap_reg_ppstg_mult_reg_454_pp0_it6;
        ap_reg_ppstg_mult_reg_454_pp0_it8 <= ap_reg_ppstg_mult_reg_454_pp0_it7;
        ap_reg_ppstg_mult_reg_454_pp0_it9 <= ap_reg_ppstg_mult_reg_454_pp0_it8;
        ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it6 <= sum_mult_addr_reg_448;
        ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it7 <= ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it6;
        ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it8 <= ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it7;
        ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it9 <= ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it8;
        ap_reg_ppstg_tmp_19_reg_428_pp0_it2 <= tmp_19_reg_428;
        ap_reg_ppstg_tmp_19_reg_428_pp0_it3 <= ap_reg_ppstg_tmp_19_reg_428_pp0_it2;
        ap_reg_ppstg_tmp_19_reg_428_pp0_it4 <= ap_reg_ppstg_tmp_19_reg_428_pp0_it3;
        ap_reg_ppstg_tmp_reg_410_pp0_it10 <= ap_reg_ppstg_tmp_reg_410_pp0_it9;
        ap_reg_ppstg_tmp_reg_410_pp0_it2 <= tmp_reg_410;
        ap_reg_ppstg_tmp_reg_410_pp0_it3 <= ap_reg_ppstg_tmp_reg_410_pp0_it2;
        ap_reg_ppstg_tmp_reg_410_pp0_it4 <= ap_reg_ppstg_tmp_reg_410_pp0_it3;
        ap_reg_ppstg_tmp_reg_410_pp0_it5 <= ap_reg_ppstg_tmp_reg_410_pp0_it4;
        ap_reg_ppstg_tmp_reg_410_pp0_it6 <= ap_reg_ppstg_tmp_reg_410_pp0_it5;
        ap_reg_ppstg_tmp_reg_410_pp0_it7 <= ap_reg_ppstg_tmp_reg_410_pp0_it6;
        ap_reg_ppstg_tmp_reg_410_pp0_it8 <= ap_reg_ppstg_tmp_reg_410_pp0_it7;
        ap_reg_ppstg_tmp_reg_410_pp0_it9 <= ap_reg_ppstg_tmp_reg_410_pp0_it8;
        ap_reg_ppstg_tmp_s_reg_414_pp0_it10 <= ap_reg_ppstg_tmp_s_reg_414_pp0_it9;
        ap_reg_ppstg_tmp_s_reg_414_pp0_it2 <= tmp_s_reg_414;
        ap_reg_ppstg_tmp_s_reg_414_pp0_it3 <= ap_reg_ppstg_tmp_s_reg_414_pp0_it2;
        ap_reg_ppstg_tmp_s_reg_414_pp0_it4 <= ap_reg_ppstg_tmp_s_reg_414_pp0_it3;
        ap_reg_ppstg_tmp_s_reg_414_pp0_it5 <= ap_reg_ppstg_tmp_s_reg_414_pp0_it4;
        ap_reg_ppstg_tmp_s_reg_414_pp0_it6 <= ap_reg_ppstg_tmp_s_reg_414_pp0_it5;
        ap_reg_ppstg_tmp_s_reg_414_pp0_it7 <= ap_reg_ppstg_tmp_s_reg_414_pp0_it6;
        ap_reg_ppstg_tmp_s_reg_414_pp0_it8 <= ap_reg_ppstg_tmp_s_reg_414_pp0_it7;
        ap_reg_ppstg_tmp_s_reg_414_pp0_it9 <= ap_reg_ppstg_tmp_s_reg_414_pp0_it8;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_exitcond_flatten1_reg_370_pp0_it1 <= exitcond_flatten1_reg_370;
        exitcond_flatten1_reg_370 <= exitcond_flatten1_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten1_reg_370 == ap_const_lv1_0))) begin
        tmp_19_reg_428 <= tmp_19_fu_359_p2;
        tmp_reg_410 <= tmp_fu_284_p2;
        tmp_s_reg_414 <= tmp_s_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_410_pp0_it9)) begin
        tmp_4_reg_465 <= grp_fu_166_p2;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        A_ce0 = ap_const_logic_1;
    end else begin
        A_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        B_ce0 = ap_const_logic_1;
    end else begin
        B_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it11) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it11)) begin
        C_ce0 = ap_const_logic_1;
    end else begin
        C_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it11 or ap_reg_ppstg_tmp_reg_410_pp0_it10 or ap_reg_ppstg_tmp_s_reg_414_pp0_it10) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it11) & (ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_410_pp0_it10) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_s_reg_414_pp0_it10))) begin
        C_we0 = ap_const_logic_1;
    end else begin
        C_we0 = ap_const_logic_0;
    end
end

always @ (Col_assign_2_reg_122 or exitcond_flatten1_reg_370 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or Col_assign_2_mid2_reg_379) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten1_reg_370 == ap_const_lv1_0))) begin
        Col_assign_2_phi_fu_126_p4 = Col_assign_2_mid2_reg_379;
    end else begin
        Col_assign_2_phi_fu_126_p4 = Col_assign_2_reg_122;
    end
end

always @ (Row_assign_reg_144 or exitcond_flatten1_reg_370 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or Row_assign_mid2_reg_393) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten1_reg_370 == ap_const_lv1_0))) begin
        Row_assign_phi_fu_148_p4 = Row_assign_mid2_reg_393;
    end else begin
        Row_assign_phi_fu_148_p4 = Row_assign_reg_144;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st14_fsm_2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st14_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_62) begin
    if (ap_sig_bdd_62) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_376) begin
    if (ap_sig_bdd_376) begin
        ap_sig_cseq_ST_st14_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it5) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) begin
        sum_mult_ce0 = ap_const_logic_1;
    end else begin
        sum_mult_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it10 or ap_reg_ppstg_tmp_reg_410_pp0_it9 or ap_reg_ppstg_tmp_s_reg_414_pp0_it9) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it10) & (ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_410_pp0_it9) & (ap_const_lv1_0 == ap_reg_ppstg_tmp_s_reg_414_pp0_it9)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it10) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_410_pp0_it9)))) begin
        sum_mult_ce1 = ap_const_logic_1;
    end else begin
        sum_mult_ce1 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it10 or ap_reg_ppstg_tmp_reg_410_pp0_it9 or ap_reg_ppstg_mult_reg_454_pp0_it9 or grp_fu_166_p2 or ap_sig_bdd_228) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it10)) begin
        if (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_410_pp0_it9)) begin
            sum_mult_d1 = ap_reg_ppstg_mult_reg_454_pp0_it9;
        end else if (ap_sig_bdd_228) begin
            sum_mult_d1 = grp_fu_166_p2;
        end else begin
            sum_mult_d1 = 'bx;
        end
    end else begin
        sum_mult_d1 = 'bx;
    end
end

always @ (ap_reg_ppiten_pp0_it10 or ap_reg_ppstg_tmp_reg_410_pp0_it9 or ap_reg_ppstg_tmp_s_reg_414_pp0_it9) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it10) & (ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_410_pp0_it9) & (ap_const_lv1_0 == ap_reg_ppstg_tmp_s_reg_414_pp0_it9)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it10) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_410_pp0_it9)))) begin
        sum_mult_we1 = ap_const_logic_1;
    end else begin
        sum_mult_we1 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_flatten1_fu_178_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it10 or ap_reg_ppiten_pp0_it11) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it11) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it10)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten1_fu_178_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten1_fu_178_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st14_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_2;
            end
        end
        ap_ST_st14_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign A_address0 = tmp_22_cast_fu_340_p1;

assign B_address0 = tmp_23_cast_fu_354_p1;

assign C_address0 = ap_reg_ppstg_C_addr_reg_443_pp0_it10;

assign C_d0 = tmp_4_reg_465;

assign Col_assign_2_mid2_fu_228_p3 = ((exitcond_flatten6_fu_196_p2[0:0] === 1'b1) ? k_fu_190_p2 : Col_assign_2_phi_fu_126_p4);

assign Col_assign_mid2_fu_248_p3 = ((tmp_14_fu_242_p2[0:0] === 1'b1) ? ap_const_lv2_0 : Col_assign_reg_155);

assign Row_assign_mid2_fu_256_p3 = ((exitcond_mid_fu_222_p2[0:0] === 1'b1) ? r_fu_236_p2 : Row_assign_mid_fu_202_p3);

assign Row_assign_mid_fu_202_p3 = ((exitcond_flatten6_fu_196_p2[0:0] === 1'b1) ? ap_const_lv2_0 : Row_assign_phi_fu_148_p4);


always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_reg_ppstg_tmp_reg_410_pp0_it9 or ap_reg_ppstg_tmp_s_reg_414_pp0_it9) begin
    ap_sig_bdd_228 = ((ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_410_pp0_it9) & (ap_const_lv1_0 == ap_reg_ppstg_tmp_s_reg_414_pp0_it9));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_376 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_62 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign c_fu_264_p2 = (Col_assign_mid2_fu_248_p3 + ap_const_lv2_1);

assign exitcond7_fu_216_p2 = (Col_assign_reg_155 == ap_const_lv2_3? 1'b1: 1'b0);

assign exitcond_flatten1_fu_178_p2 = (indvar_flatten1_reg_111 == ap_const_lv5_1B? 1'b1: 1'b0);

assign exitcond_flatten6_fu_196_p2 = (indvar_flatten_reg_133 == ap_const_lv4_9? 1'b1: 1'b0);

assign exitcond_mid_fu_222_p2 = (exitcond7_fu_216_p2 & not_exitcond_flatten_fu_210_p2);

assign grp_fu_166_ce = ap_const_logic_1;

assign grp_fu_172_ce = ap_const_logic_1;

assign indvar_flatten_next1_fu_184_p2 = (indvar_flatten1_reg_111 + ap_const_lv5_1);

assign indvar_flatten_next_fu_276_p3 = ((exitcond_flatten6_fu_196_p2[0:0] === 1'b1) ? ap_const_lv4_1 : indvar_flatten_op_fu_270_p2);

assign indvar_flatten_op_fu_270_p2 = (indvar_flatten_reg_133 + ap_const_lv4_1);

assign k_fu_190_p2 = (Col_assign_2_phi_fu_126_p4 + ap_const_lv2_1);

assign not_exitcond_flatten_fu_210_p2 = (exitcond_flatten6_fu_196_p2 ^ ap_const_lv1_1);

assign p_shl1_cast_fu_304_p1 = tmp_12_fu_297_p3;

assign p_shl_cast_fu_324_p1 = tmp_15_fu_317_p3;

assign r_fu_236_p2 = (Row_assign_mid_fu_202_p3 + ap_const_lv2_1);

assign sum_mult_address0 = tmp_24_cast_fu_365_p1;

assign sum_mult_address1 = ap_reg_ppstg_sum_mult_addr_reg_448_pp0_it9;

assign tmp_12_fu_297_p3 = {{Col_assign_2_mid2_reg_379}, {ap_const_lv2_0}};

assign tmp_13_fu_308_p2 = (p_shl1_cast_fu_304_p1 - tmp_i_i_cast_fu_294_p1);

assign tmp_14_fu_242_p2 = (exitcond_mid_fu_222_p2 | exitcond_flatten6_fu_196_p2);

assign tmp_15_fu_317_p3 = {{Row_assign_mid2_reg_393}, {ap_const_lv2_0}};

assign tmp_16_fu_328_p2 = (p_shl_cast_fu_324_p1 - tmp_1_cast_fu_314_p1);

assign tmp_17_fu_334_p2 = (tmp_16_fu_328_p2 + tmp_i_i_cast_fu_294_p1);

assign tmp_18_fu_348_p2 = (tmp_13_fu_308_p2 + tmp_i_i4_cast_fu_345_p1);

assign tmp_19_fu_359_p2 = (tmp_16_fu_328_p2 + tmp_i_i4_cast_fu_345_p1);

assign tmp_1_cast_fu_314_p1 = Row_assign_mid2_reg_393;

assign tmp_22_cast_fu_340_p1 = $signed(tmp_17_fu_334_p2);

assign tmp_23_cast_fu_354_p1 = $signed(tmp_18_fu_348_p2);

assign tmp_24_cast_fu_365_p1 = $signed(ap_reg_ppstg_tmp_19_reg_428_pp0_it4);

assign tmp_fu_284_p2 = (Col_assign_2_mid2_reg_379 == ap_const_lv2_0? 1'b1: 1'b0);

assign tmp_i_i4_cast_fu_345_p1 = Col_assign_mid2_reg_388;

assign tmp_i_i_cast_fu_294_p1 = Col_assign_2_mid2_reg_379;

assign tmp_s_fu_289_p2 = (Col_assign_2_mid2_reg_379 == ap_const_lv2_2? 1'b1: 1'b0);


endmodule //matrix_multiply_top_matrix_multiply_alt2

