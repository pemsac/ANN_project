// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=201,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=339,HLS_SYN_LUT=549}" *)

module example (
        ap_clk,
        ap_rst_n,
        A_TDATA,
        A_TVALID,
        A_TREADY,
        B_TDATA,
        B_TVALID,
        B_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_st3_fsm_2 = 8'b100;
parameter    ap_ST_st4_fsm_3 = 8'b1000;
parameter    ap_ST_st5_fsm_4 = 8'b10000;
parameter    ap_ST_st6_fsm_5 = 8'b100000;
parameter    ap_ST_st7_fsm_6 = 8'b1000000;
parameter    ap_ST_st8_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_40A00000 = 32'b1000000101000000000000000000000;
parameter    ap_const_lv6_32 = 6'b110010;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] A_TDATA;
input   A_TVALID;
output   A_TREADY;
output  [31:0] B_TDATA;
output   B_TVALID;
input   B_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg A_TREADY;
reg B_TVALID;
reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm = 8'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_26;
reg    ap_ready;
wire   [31:0] mode;
reg   [5:0] C_address0;
reg    C_ce0;
reg    C_we0;
wire   [31:0] C_d0;
wire   [31:0] C_q0;
wire    example_AXILiteS_s_axi_U_ap_dummy_ce;
wire   [0:0] tmp_fu_114_p2;
reg   [0:0] tmp_reg_154;
wire   [5:0] i_3_fu_126_p2;
reg   [5:0] i_3_reg_161;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_98;
wire   [0:0] exitcond1_fu_137_p2;
reg    ap_sig_bdd_108;
wire   [0:0] exitcond_fu_120_p2;
wire   [5:0] i_2_fu_143_p2;
reg   [31:0] C_load_reg_179;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_127;
reg   [5:0] i_1_reg_86;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_136;
reg    ap_sig_ioackin_B_TREADY;
reg   [5:0] i_reg_97;
wire   [63:0] tmp_3_fu_132_p1;
wire   [63:0] tmp_1_fu_149_p1;
wire   [31:0] grp_fu_108_p2;
reg    ap_reg_ioackin_B_TREADY = 1'b0;
reg    grp_fu_108_ce;
reg   [7:0] ap_NS_fsm;
reg    ap_sig_bdd_117;
reg    ap_sig_bdd_107;


example_C #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
C_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( C_address0 ),
    .ce0( C_ce0 ),
    .we0( C_we0 ),
    .d0( C_d0 ),
    .q0( C_q0 )
);

example_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
example_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( example_AXILiteS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .mode( mode )
);

example_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
example_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( C_load_reg_179 ),
    .din1( ap_const_lv32_40A00000 ),
    .ce( grp_fu_108_ce ),
    .dout( grp_fu_108_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_B_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_B_TREADY)) begin
                ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == B_TREADY)) begin
                ap_reg_ioackin_B_TREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (tmp_fu_114_p2 == ap_const_lv1_0))) begin
        i_1_reg_86 <= ap_const_lv6_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_logic_0 == ap_sig_ioackin_B_TREADY))) begin
        i_1_reg_86 <= i_3_reg_161;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_114_p2 == ap_const_lv1_0))) begin
        i_reg_97 <= ap_const_lv6_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_reg_154 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond1_fu_137_p2) & ~ap_sig_bdd_108)) begin
        i_reg_97 <= i_2_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        C_load_reg_179 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_reg_154 == ap_const_lv1_0) & ~ap_sig_bdd_108)) begin
        i_3_reg_161 <= i_3_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_reg_154 <= tmp_fu_114_p2;
    end
end

always @ (tmp_reg_154 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_137_p2 or ap_sig_bdd_108) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_reg_154 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond1_fu_137_p2) & ~ap_sig_bdd_108)) begin
        A_TREADY = ap_const_logic_1;
    end else begin
        A_TREADY = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_reg_ioackin_B_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & (ap_const_logic_0 == ap_reg_ioackin_B_TREADY))) begin
        B_TVALID = ap_const_logic_1;
    end else begin
        B_TVALID = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_3_fu_132_p1 or tmp_1_fu_149_p1 or ap_sig_bdd_117 or ap_sig_bdd_107) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        if (ap_sig_bdd_107) begin
            C_address0 = tmp_1_fu_149_p1;
        end else if (ap_sig_bdd_117) begin
            C_address0 = tmp_3_fu_132_p1;
        end else begin
            C_address0 = 'bx;
        end
    end else begin
        C_address0 = 'bx;
    end
end

always @ (tmp_reg_154 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_137_p2 or ap_sig_bdd_108 or exitcond_fu_120_p2) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_reg_154 == ap_const_lv1_0) & ~ap_sig_bdd_108 & (ap_const_lv1_0 == exitcond_fu_120_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_reg_154 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond1_fu_137_p2) & ~ap_sig_bdd_108))) begin
        C_ce0 = ap_const_logic_1;
    end else begin
        C_ce0 = ap_const_logic_0;
    end
end

always @ (tmp_reg_154 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_137_p2 or ap_sig_bdd_108) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_reg_154 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond1_fu_137_p2) & ~ap_sig_bdd_108)) begin
        C_we0 = ap_const_logic_1;
    end else begin
        C_we0 = ap_const_logic_0;
    end
end

always @ (tmp_reg_154 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_137_p2 or ap_sig_bdd_108 or exitcond_fu_120_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_108 & (((tmp_reg_154 == ap_const_lv1_0) & ~(ap_const_lv1_0 == exitcond_fu_120_p2)) | (~(tmp_reg_154 == ap_const_lv1_0) & ~(ap_const_lv1_0 == exitcond1_fu_137_p2))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (tmp_reg_154 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_137_p2 or ap_sig_bdd_108 or exitcond_fu_120_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_108 & (((tmp_reg_154 == ap_const_lv1_0) & ~(ap_const_lv1_0 == exitcond_fu_120_p2)) | (~(tmp_reg_154 == ap_const_lv1_0) & ~(ap_const_lv1_0 == exitcond1_fu_137_p2))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_26) begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_98) begin
    if (ap_sig_bdd_98) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_127) begin
    if (ap_sig_bdd_127) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_136) begin
    if (ap_sig_bdd_136) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (B_TREADY or ap_reg_ioackin_B_TREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_B_TREADY)) begin
        ap_sig_ioackin_B_TREADY = B_TREADY;
    end else begin
        ap_sig_ioackin_B_TREADY = ap_const_logic_1;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_ioackin_B_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY)))) begin
        grp_fu_108_ce = ap_const_logic_0;
    end else begin
        grp_fu_108_ce = ap_const_logic_1;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_reg_154 or exitcond1_fu_137_p2 or ap_sig_bdd_108 or exitcond_fu_120_p2 or ap_sig_ioackin_B_TREADY) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((~ap_sig_bdd_108 & (((tmp_reg_154 == ap_const_lv1_0) & ~(ap_const_lv1_0 == exitcond_fu_120_p2)) | (~(tmp_reg_154 == ap_const_lv1_0) & ~(ap_const_lv1_0 == exitcond1_fu_137_p2))))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if ((~(tmp_reg_154 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond1_fu_137_p2) & ~ap_sig_bdd_108)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if (((tmp_reg_154 == ap_const_lv1_0) & ~ap_sig_bdd_108 & (ap_const_lv1_0 == exitcond_fu_120_p2))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_B_TREADY)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign B_TDATA = grp_fu_108_p2;

assign C_d0 = A_TDATA;


always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (tmp_reg_154 or exitcond1_fu_137_p2) begin
    ap_sig_bdd_107 = (~(tmp_reg_154 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond1_fu_137_p2));
end


always @ (A_TVALID or tmp_reg_154 or exitcond1_fu_137_p2) begin
    ap_sig_bdd_108 = ((A_TVALID == ap_const_logic_0) & ~(tmp_reg_154 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond1_fu_137_p2));
end


always @ (tmp_reg_154 or exitcond_fu_120_p2) begin
    ap_sig_bdd_117 = ((tmp_reg_154 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond_fu_120_p2));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_127 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_136 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_26 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_98 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign example_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign exitcond1_fu_137_p2 = (i_reg_97 == ap_const_lv6_32? 1'b1: 1'b0);

assign exitcond_fu_120_p2 = (i_1_reg_86 == ap_const_lv6_32? 1'b1: 1'b0);

assign i_2_fu_143_p2 = (i_reg_97 + ap_const_lv6_1);

assign i_3_fu_126_p2 = (i_1_reg_86 + ap_const_lv6_1);

assign tmp_1_fu_149_p1 = i_reg_97;

assign tmp_3_fu_132_p1 = i_1_reg_86;

assign tmp_fu_114_p2 = (mode == ap_const_lv32_1? 1'b1: 1'b0);


endmodule //example

