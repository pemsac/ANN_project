-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    B_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=201,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=339,HLS_SYN_LUT=549}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_40A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000101000000000000000000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal mode : STD_LOGIC_VECTOR (31 downto 0);
    signal C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_we0 : STD_LOGIC;
    signal C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal example_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal tmp_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_126_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_161 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal exitcond1_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_108 : BOOLEAN;
    signal exitcond_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_143_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_load_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_127 : BOOLEAN;
    signal i_1_reg_86 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_136 : BOOLEAN;
    signal ap_sig_ioackin_B_TREADY : STD_LOGIC;
    signal i_reg_97 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_B_TREADY : STD_LOGIC := '0';
    signal grp_fu_108_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_bdd_117 : BOOLEAN;
    signal ap_sig_bdd_107 : BOOLEAN;

    component example_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component example_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component example_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        mode : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    C_U : component example_C
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_address0,
        ce0 => C_ce0,
        we0 => C_we0,
        d0 => C_d0,
        q0 => C_q0);

    example_AXILiteS_s_axi_U : component example_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => example_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        mode => mode);

    example_fadd_32ns_32ns_32_5_full_dsp_U0 : component example_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => C_load_reg_179,
        din1 => ap_const_lv32_40A00000,
        ce => grp_fu_108_ce,
        dout => grp_fu_108_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_B_TREADY assign process. --
    ap_reg_ioackin_B_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_B_TREADY))) then 
                        ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = B_TREADY)) then 
                        ap_reg_ioackin_B_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_86 assign process. --
    i_1_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_114_p2 = ap_const_lv1_0))) then 
                i_1_reg_86 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))) then 
                i_1_reg_86 <= i_3_reg_161;
            end if; 
        end if;
    end process;

    -- i_reg_97 assign process. --
    i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_114_p2 = ap_const_lv1_0)))) then 
                i_reg_97 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_reg_154 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_137_p2) and not(ap_sig_bdd_108))) then 
                i_reg_97 <= i_2_fu_143_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                C_load_reg_179 <= C_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_154 = ap_const_lv1_0) and not(ap_sig_bdd_108))) then
                i_3_reg_161 <= i_3_fu_126_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_reg_154 <= tmp_fu_114_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_reg_154, exitcond1_fu_137_p2, ap_sig_bdd_108, exitcond_fu_120_p2, ap_sig_ioackin_B_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not(ap_sig_bdd_108) and (((tmp_reg_154 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_120_p2))) or (not((tmp_reg_154 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_fu_137_p2)))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((tmp_reg_154 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_137_p2) and not(ap_sig_bdd_108))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((tmp_reg_154 = ap_const_lv1_0) and not(ap_sig_bdd_108) and (ap_const_lv1_0 = exitcond_fu_120_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_B_TREADY))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- A_TREADY assign process. --
    A_TREADY_assign_proc : process(tmp_reg_154, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_137_p2, ap_sig_bdd_108)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_reg_154 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_137_p2) and not(ap_sig_bdd_108))) then 
            A_TREADY <= ap_const_logic_1;
        else 
            A_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    B_TDATA <= grp_fu_108_p2;

    -- B_TVALID assign process. --
    B_TVALID_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_reg_ioackin_B_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_logic_0 = ap_reg_ioackin_B_TREADY))) then 
            B_TVALID <= ap_const_logic_1;
        else 
            B_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- C_address0 assign process. --
    C_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_3_fu_132_p1, tmp_1_fu_149_p1, ap_sig_bdd_117, ap_sig_bdd_107)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (ap_sig_bdd_107) then 
                C_address0 <= tmp_1_fu_149_p1(6 - 1 downto 0);
            elsif (ap_sig_bdd_117) then 
                C_address0 <= tmp_3_fu_132_p1(6 - 1 downto 0);
            else 
                C_address0 <= "XXXXXX";
            end if;
        else 
            C_address0 <= "XXXXXX";
        end if; 
    end process;


    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(tmp_reg_154, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_137_p2, ap_sig_bdd_108, exitcond_fu_120_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_154 = ap_const_lv1_0) and not(ap_sig_bdd_108) and (ap_const_lv1_0 = exitcond_fu_120_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_reg_154 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_137_p2) and not(ap_sig_bdd_108)))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= A_TDATA;

    -- C_we0 assign process. --
    C_we0_assign_proc : process(tmp_reg_154, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_137_p2, ap_sig_bdd_108)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_reg_154 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_137_p2) and not(ap_sig_bdd_108)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_reg_154, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_137_p2, ap_sig_bdd_108, exitcond_fu_120_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_108) and (((tmp_reg_154 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_120_p2))) or (not((tmp_reg_154 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_fu_137_p2)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_reg_154, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_137_p2, ap_sig_bdd_108, exitcond_fu_120_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_108) and (((tmp_reg_154 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_120_p2))) or (not((tmp_reg_154 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_fu_137_p2)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(tmp_reg_154, exitcond1_fu_137_p2)
    begin
                ap_sig_bdd_107 <= (not((tmp_reg_154 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_137_p2));
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(A_TVALID, tmp_reg_154, exitcond1_fu_137_p2)
    begin
                ap_sig_bdd_108 <= ((A_TVALID = ap_const_logic_0) and not((tmp_reg_154 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_137_p2));
    end process;


    -- ap_sig_bdd_117 assign process. --
    ap_sig_bdd_117_assign_proc : process(tmp_reg_154, exitcond_fu_120_p2)
    begin
                ap_sig_bdd_117 <= ((tmp_reg_154 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_120_p2));
    end process;


    -- ap_sig_bdd_127 assign process. --
    ap_sig_bdd_127_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_127 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_136 assign process. --
    ap_sig_bdd_136_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_136 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_127)
    begin
        if (ap_sig_bdd_127) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_136)
    begin
        if (ap_sig_bdd_136) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_B_TREADY assign process. --
    ap_sig_ioackin_B_TREADY_assign_proc : process(B_TREADY, ap_reg_ioackin_B_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_B_TREADY)) then 
            ap_sig_ioackin_B_TREADY <= B_TREADY;
        else 
            ap_sig_ioackin_B_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    example_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    exitcond1_fu_137_p2 <= "1" when (i_reg_97 = ap_const_lv6_32) else "0";
    exitcond_fu_120_p2 <= "1" when (i_1_reg_86 = ap_const_lv6_32) else "0";

    -- grp_fu_108_ce assign process. --
    grp_fu_108_ce_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st8_fsm_7, ap_sig_ioackin_B_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))) then 
            grp_fu_108_ce <= ap_const_logic_0;
        else 
            grp_fu_108_ce <= ap_const_logic_1;
        end if; 
    end process;

    i_2_fu_143_p2 <= std_logic_vector(unsigned(i_reg_97) + unsigned(ap_const_lv6_1));
    i_3_fu_126_p2 <= std_logic_vector(unsigned(i_1_reg_86) + unsigned(ap_const_lv6_1));
    tmp_1_fu_149_p1 <= std_logic_vector(resize(unsigned(i_reg_97),64));
    tmp_3_fu_132_p1 <= std_logic_vector(resize(unsigned(i_1_reg_86),64));
    tmp_fu_114_p2 <= "1" when (mode = ap_const_lv32_1) else "0";
end behav;
